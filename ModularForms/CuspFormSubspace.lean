import Mathlib.NumberTheory.ModularForms.Basic

open CongruenceSubgroup
open ModularForm Complex Filter UpperHalfPlane Function
open ModularFormClass
open Complex Topology Manifold

open scoped Real MatrixGroups CongruenceSubgroup

variable {k : ‚Ñ§} {F : Type*} [FunLike F ‚Ñç ‚ÑÇ] {Œì : Subgroup SL(2, ‚Ñ§)} (n : ‚Ñï) (f : F)

local notation "I‚àû" => comap Complex.im atTop
local notation "ùï¢" => Periodic.qParam
local notation "i" => Complex.I

lemma bdd_at_infty_of_zero_at_infty (f : CuspForm Œì k) : ‚àÄ A : SL(2, ‚Ñ§), IsBoundedAtImInfty (f ‚à£[k] A) := by
  intro A
  have h‚ÇÅ : IsZeroAtImInfty (f ‚à£[k] A) := by
    apply CuspForm.zero_at_infty' f
  rw [UpperHalfPlane.isBoundedAtImInfty_iff]
  rw [UpperHalfPlane.isZeroAtImInfty_iff] at h‚ÇÅ
  use 1
  apply h‚ÇÅ _ _
  linarith

@[coe]
instance coe_CuspForm (f : CuspForm Œì k) : ModularForm Œì k where
  toFun := f
  slash_action_eq' := by apply SlashInvariantForm.slash_action_eq'
  holo' := by apply CuspForm.holo'
  bdd_at_infty' := by apply bdd_at_infty_of_zero_at_infty

@[congr]
lemma CuspForm_congr {f g : CuspForm Œì k} : coe_CuspForm f = coe_CuspForm g ‚Üî
(coe_CuspForm f).toFun = (coe_CuspForm g).toFun := by
  constructor
  ¬∑ intro h
    rw [h]
  ¬∑ intro h
    ext œÑ
    have : (coe_CuspForm f).toFun œÑ = (coe_CuspForm g).toFun œÑ := by
      rw [h]
    apply this

@[simp]
lemma CuspForm_inj {f g : CuspForm Œì k}  : coe_CuspForm f = coe_CuspForm g ‚Üí
  f = g := by
    intro h
    ext z
    have : (coe_CuspForm f) z = (coe_CuspForm g) z := by congr
    apply this

@[simp]
lemma coe_CuspForm_apply (f : CuspForm Œì k) {x : ‚Ñç} : (coe_CuspForm f).toFun x = f x := by rfl

def coe_Hom' : CuspForm Œì k  ‚Üí+ ModularForm Œì k where
  toFun := coe_CuspForm
  map_zero' := by rfl
  map_add' := by intro f g ; rfl

@[simp]
lemma coehom_congr {f g : CuspForm Œì k} : coe_Hom' f = coe_Hom' g ‚Üî
coe_CuspForm f = coe_CuspForm g := by
  tauto

@[simp]
lemma coe_Hom'_inj {f g : CuspForm Œì k} : coe_Hom' f = coe_Hom' g ‚Üí
f = g := by
  intro h
  rw [coehom_congr] at h
  apply CuspForm_inj h

def coe_Hom : CuspForm Œì k ‚Üí[‚ÑÇ] ModularForm Œì k where
  toFun := coe_Hom'
  map_smul' := by intro c f ; rfl

@[simp]
lemma coe_Hom_congr {f g : CuspForm Œì k} : coe_Hom f = coe_Hom g ‚Üî
coe_Hom' f = coe_Hom' g := by
  tauto

@[simp]
lemma coe_hom_inj {f g : CuspForm Œì k} : (coe_Hom f = coe_Hom g) ‚Üí f = g  := by
intro h ;
rw [coe_Hom_congr] at h
apply coe_Hom'_inj ; exact h

instance CuspForm_Subspace (Œì : Subgroup SL(2, ‚Ñ§)) (k : ‚Ñ§): Submodule ‚ÑÇ (ModularForm Œì k) where
  carrier := Set.range coe_Hom
  add_mem' := by
    intro f g h h‚ÇÅ
    simp ; simp at h ; simp at h‚ÇÅ
    rcases h with ‚ü®f1, hf‚ü© ; rcases h‚ÇÅ with ‚ü®g1, hg‚ü©
    use (f1 + g1)
    rw [‚Üê hf,‚Üê hg]
    rfl
  zero_mem' := by simp ; use 0 ; rfl
  smul_mem' := by
    intro c f h
    simp ; simp at h
    rcases h with ‚ü®g, h‚ÇÅ‚ü©; use (c ‚Ä¢ g)
    simp ; rw [h‚ÇÅ]

@[simp]
lemma coee {f : CuspForm Œì k} :
coe_Hom f ‚àà CuspForm_Subspace Œì k := by tauto



@[simp]
lemma coe_hom_surj (f : ModularForm Œì k) (finCuspSub : f ‚àà (CuspForm_Subspace Œì k)) :
‚àÉ g : CuspForm Œì k, f = coe_Hom g := by
  have finCuspSub: f ‚àà Set.range coe_Hom := by tauto
  have : (CuspForm_Subspace Œì k).carrier ‚äÜ Set.range coe_Hom := by rfl
  rw [Set.subset_range_iff_exists_image_eq] at this
  obtain ‚ü®t, tis‚ü© := this
  have h‚ÇÅ: (CuspForm_Subspace Œì k).carrier = Set.range ‚áëcoe_Hom := rfl
  rw [h‚ÇÅ] at tis
  rw [‚Üê tis] at finCuspSub
  unfold Set.image at *
  have h‚ÇÇ : ‚àÉ a ‚àà t, coe_Hom a = f := by apply finCuspSub
  obtain ‚ü®a, aint‚ü© := h‚ÇÇ
  use a
  tauto

theorem CuspForm_Subspace_zeroatinfty {f : CuspForm_Subspace Œì k} : ‚àÄ (A : SL(2, ‚Ñ§)), IsZeroAtImInfty (toSlashInvariantForm f.1 ‚à£[k] A)  := by
  have :  ‚àÉ (g : CuspForm Œì k), f = coe_Hom g := by
    simp only [SetLike.coe_mem, coe_hom_surj]
  obtain ‚ü®g, h‚ü© := this
  rw [h]
  have : ‚àÄ (A : SL(2, ‚Ñ§)), IsZeroAtImInfty (CuspForm.toSlashInvariantForm g ‚à£[k] A) := by apply g.zero_at_infty'
  exact fun A ‚Ü¶ this A

theorem CuspForm_Subspace_MDifferentiable {f : CuspForm_Subspace Œì k} :
MDifferentiable ùìò(‚ÑÇ, ‚ÑÇ) ùìò(‚ÑÇ, ‚ÑÇ) (toSlashInvariantForm f.1) := by
have :  ‚àÉ (g : CuspForm Œì k), f = coe_Hom g := by
    simp only [SetLike.coe_mem, coe_hom_surj]
obtain ‚ü®g, h‚ü© := this
rw [h]
have : MDifferentiable ùìò(‚ÑÇ, ‚ÑÇ) ùìò(‚ÑÇ, ‚ÑÇ) (CuspForm.toSlashInvariantForm g)  := by apply g.holo'
exact fun A ‚Ü¶ this A

def Coe_Hom_inv : CuspForm_Subspace Œì k ‚Üí CuspForm Œì k :=
fun f => CuspForm.mk f (CuspForm_Subspace_MDifferentiable) (CuspForm_Subspace_zeroatinfty)

noncomputable
instance isom (Œì : Subgroup SL(2, ‚Ñ§)) (k : ‚Ñ§) :
  (CuspForm Œì k) ‚âÉ‚Çó[‚ÑÇ] CuspForm_Subspace Œì k where
    toFun := fun f => ‚ü®coe_Hom f , coee‚ü©
    map_add' := by intro x y; tauto
    map_smul' := by intro c x ; tauto
    invFun := Coe_Hom_inv
    left_inv := by
      intro x; dsimp;
      rfl
    right_inv := by
      intro x; dsimp;
      rfl
