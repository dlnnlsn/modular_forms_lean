import Mathlib.Algebra.BigOperators.Group.Finset.Defs
import Mathlib.Algebra.BigOperators.Ring.Finset
import Mathlib.Algebra.BigOperators.Intervals
import Mathlib.Data.Int.Interval
import Mathlib.Order.Filter.AtTopBot.Defs
import Mathlib.Topology.Algebra.Group.Defs
import Mathlib.Topology.Algebra.GroupWithZero
import Mathlib.Topology.Algebra.Monoid
import Mathlib.Topology.Defs.Filter
import Mathlib.Topology.Algebra.InfiniteSum.Defs

open Filter Function Topology

variable {Œ±: Type*}
variable [CommMonoid Œ±]

open Classical in
@[to_additive]
noncomputable def prod_within_radius (r: ‚Ñï) (S: Set ‚Ñ§) (f: ‚Ñ§ ‚Üí Œ±): Œ± :=
  ‚àè i ‚àà (Finset.Ico (-r: ‚Ñ§) r).filter (¬∑ ‚àà S), f i

open Classical in
@[to_additive]
lemma prod_over_union_within_radius (r: ‚Ñï) {S T: Set ‚Ñ§} (h: S ‚à© T = ‚àÖ) (f: ‚Ñ§ ‚Üí Œ±):
    prod_within_radius r (S ‚à™ T) f = (prod_within_radius r S f) * (prod_within_radius r T f) := by
  unfold prod_within_radius
  rw [‚ÜêFinset.prod_union]
  congr
  rw [‚ÜêFinset.filter_or]
  simp_rw [Set.mem_union]
  rw [Finset.disjoint_filter]
  intro _ _ hS hT
  simpa [h] using Set.mem_inter hS hT

open Classical in
@[to_additive]
lemma prod_within_radius_of_top (r: ‚Ñï) (f: ‚Ñ§ ‚Üí Œ±):
    prod_within_radius r ‚ä§ f = ‚àè i ‚àà Finset.Ico (-r: ‚Ñ§) r, f i := by
  unfold prod_within_radius
  congr
  apply Finset.filter_true_of_mem (Œª _ _ ‚Ü¶ by trivial)

@[to_additive]
lemma prod_within_radius_of_prod (r: ‚Ñï) (S: Set ‚Ñ§) (f g: ‚Ñ§ ‚Üí Œ±):
    prod_within_radius r S (f * g) = prod_within_radius r S f * prod_within_radius r S g := Finset.prod_mul_distrib

@[to_additive]
lemma prod_within_radius_of_inv {Œ±: Type*} [DivisionCommMonoid Œ±] [TopologicalSpace Œ±] (r: ‚Ñï) (S: Set ‚Ñ§) (f: ‚Ñ§ ‚Üí Œ±):
    prod_within_radius r S (f‚Åª¬π) = (prod_within_radius r S f)‚Åª¬π := Finset.prod_inv_distrib

@[to_additive]
lemma prod_of_set_eq {Œ≤: Type*} {A B: Finset Œ≤} {f: Œ≤ ‚Üí Œ±} (h: A = B): ‚àè i ‚àà A, f i = ‚àè i ‚àà B, f i := by congr

@[to_additive]
lemma prod_within_radius_of_top_range_div {Œ±: Type*} [CommGroup Œ±] (r: ‚Ñï) (f: ‚Ñ§ ‚Üí Œ±):
    prod_within_radius r ‚ä§ (Œª n ‚Ü¶ f n / f (n + 1)) = f (-r: ‚Ñ§) / f r := by
  rw [prod_within_radius_of_top]
  induction' r with r hr
  simp
  have h_union: Finset.Ico (-(r + 1): ‚Ñ§) (r + 1) = {(-(r + 1): ‚Ñ§)} ‚à™ Finset.Ico (-r: ‚Ñ§) r ‚à™ {(r: ‚Ñ§)} := by
    ext x
    simp only [Finset.mem_Ico, Finset.mem_union, Finset.mem_singleton]
    omega
  rw_mod_cast [prod_of_set_eq h_union] 
  rw [Finset.prod_union, Finset.prod_union, hr, Finset.prod_singleton, Finset.prod_singleton]
  rw [Int.neg_ofNat_eq_negSucc_add_one_iff.mpr rfl]
  simp [div_eq_mul_inv, mul_assoc]
  all_goals {
    rw [Finset.disjoint_iff_ne] 
    intro a ha b hb
    simp only [Finset.mem_union, Finset.mem_singleton, Finset.mem_Ico] at *
    omega
  }

lemma prod_within_radius_of_top_range_div‚ÇÄ {Œ±: Type*} [CommGroupWithZero Œ±] (r: ‚Ñï) (f: ‚Ñ§ ‚Üí Œ±) (h: ‚àÄ n, f n ‚â† 0):
    prod_within_radius r ‚ä§ (Œª n ‚Ü¶ (f n) / (f (n + 1))) = f (-r: ‚Ñ§) / f r := by
  rw [prod_within_radius_of_top]
  induction' r with r hr
  simp [h]
  have h_union: Finset.Ico (-(r + 1): ‚Ñ§) (r + 1) = {(-(r + 1): ‚Ñ§)} ‚à™ Finset.Ico (-r: ‚Ñ§) r ‚à™ {(r: ‚Ñ§)} := by
    ext x
    simp only [Finset.mem_Ico, Finset.mem_union, Finset.mem_singleton]
    omega
  rw_mod_cast [prod_of_set_eq h_union] 
  rw [Finset.prod_union, Finset.prod_union, hr, Finset.prod_singleton, Finset.prod_singleton]
  rw [Int.neg_ofNat_eq_negSucc_add_one_iff.mpr rfl]
  simp [div_eq_mul_inv, mul_assoc, h]
  all_goals {
    rw [Finset.disjoint_iff_ne] 
    intro a ha b hb
    simp only [Finset.mem_union, Finset.mem_singleton, Finset.mem_Ico] at *
    omega
  }

variable [TopologicalSpace Œ±]

open Classical in
@[to_additive]
def HasProdOnZ (S: Set ‚Ñ§) (f: ‚Ñ§ ‚Üí Œ±) (a: Œ±): Prop :=
  Filter.Tendsto (prod_within_radius ¬∑ S f) atTop (ùìù a)

@[to_additive]
def MultipliableOnZ (S: Set ‚Ñ§) (f: ‚Ñ§ ‚Üí Œ±): Prop :=
  ‚àÉ a, HasProdOnZ S f a

@[to_additive]
theorem HasProdOnZ.multipliableOnZ {S: Set ‚Ñ§} {f: ‚Ñ§ ‚Üí Œ±} {a: Œ±} (h: HasProdOnZ S f a):
    MultipliableOnZ S f := sorry

open Classical in
@[to_additive]
noncomputable irreducible_def z_prod (S: Set ‚Ñ§) (f: ‚Ñ§ ‚Üí Œ±): Œ± :=
  if h: MultipliableOnZ S f then h.choose else 1

@[to_additive]
theorem HasProdOnZ.unique [T2Space Œ±] {S: Set ‚Ñ§} {f: ‚Ñ§ ‚Üí Œ±} {a‚ÇÅ a‚ÇÇ: Œ±}:
    HasProdOnZ S f a‚ÇÅ ‚Üí HasProdOnZ S f a‚ÇÇ ‚Üí a‚ÇÅ = a‚ÇÇ := by
  classical exact tendsto_nhds_unique

open Classical in
@[to_additive]
theorem HasProdOnZ.congr {S‚ÇÅ S‚ÇÇ: Set ‚Ñ§} {f‚ÇÅ f‚ÇÇ: ‚Ñ§ ‚Üí Œ±} {a: Œ±} (hS: S‚ÇÅ = S‚ÇÇ) (hf: ‚àÄ k ‚àà S‚ÇÇ, f‚ÇÅ k = f‚ÇÇ k) (h: HasProdOnZ S‚ÇÅ f‚ÇÅ a): HasProdOnZ S‚ÇÇ f‚ÇÇ a := by
  unfold HasProdOnZ
  have h_prod (r: ‚Ñï): prod_within_radius r S‚ÇÅ f‚ÇÅ = prod_within_radius r S‚ÇÇ f‚ÇÇ := by
    apply Finset.prod_congr
    apply Finset.filter_congr
    intro x _
    rw [hS]
    intro x hx
    rw [Finset.mem_filter] at hx
    exact hf x hx.right
  simp_rw [‚Üêh_prod]
  exact h

@[to_additive]
theorem MultipliableOnZ.congr {S‚ÇÅ S‚ÇÇ: Set ‚Ñ§} {f‚ÇÅ f‚ÇÇ: ‚Ñ§ ‚Üí Œ±} (hS: S‚ÇÅ = S‚ÇÇ) (hf: ‚àÄ k ‚àà S‚ÇÇ, f‚ÇÅ k = f‚ÇÇ k): MultipliableOnZ S‚ÇÅ f‚ÇÅ ‚Üî MultipliableOnZ S‚ÇÇ f‚ÇÇ := by
  constructor
  exact Œª ‚ü®a, ha‚ü© ‚Ü¶ ‚ü®a, HasProdOnZ.congr hS hf ha‚ü©
  replace hf: ‚àÄ k ‚àà S‚ÇÅ, f‚ÇÇ k = f‚ÇÅ k := by
    intro k hk
    rw [hS] at hk
    exact Eq.symm <| hf k hk
  symm at hS
  exact Œª ‚ü®a, ha‚ü© ‚Ü¶ ‚ü®a, HasProdOnZ.congr hS hf ha‚ü©

@[to_additive]
theorem MultipliableOnZ.of_z_prod_ne_one {S: Set ‚Ñ§} {f: ‚Ñ§ ‚Üí Œ±} (h: z_prod S f ‚â† 1):
    MultipliableOnZ S f := by
  by_contra h_not_multiplialbe
  simp [z_prod, h_not_multiplialbe] at h

@[to_additive]
theorem MultipliableOnZ.hasProdOnZ {S: Set ‚Ñ§} {f: ‚Ñ§ ‚Üí Œ±} (h: MultipliableOnZ S f):
    HasProdOnZ S f (z_prod S f) := by
  simp only [z_prod, h, dite_true, h.choose_spec]

@[to_additive]
theorem HasProdOnZ.z_prod_eq [T2Space Œ±] {S: Set ‚Ñ§} {f: ‚Ñ§ ‚Üí Œ±} {a: Œ±} (h: HasProdOnZ S f a): z_prod S f = a :=
  (MultipliableOnZ.hasProdOnZ ‚ü®a, h‚ü©).unique h

@[to_additive]
theorem MultipliableOnZ.z_prod_congr [T2Space Œ±] {S‚ÇÅ S‚ÇÇ: Set ‚Ñ§} {f‚ÇÅ f‚ÇÇ: ‚Ñ§ ‚Üí Œ±} (hS: S‚ÇÅ = S‚ÇÇ) (hf: ‚àÄ k ‚àà S‚ÇÇ, f‚ÇÅ k = f‚ÇÇ k) (h: MultipliableOnZ S‚ÇÅ f‚ÇÅ):
    z_prod S‚ÇÅ f‚ÇÅ = z_prod S‚ÇÇ f‚ÇÇ := by
  obtain ‚ü®a, ha‚ü© := h
  have hb := HasProdOnZ.congr hS hf ha
  rw [HasProdOnZ.z_prod_eq ha, HasProdOnZ.z_prod_eq hb]

@[to_additive]
theorem HasProdOnZ.of_z_prod_ne_one {S: Set ‚Ñ§} {f: ‚Ñ§ ‚Üí Œ±} (h: z_prod S f ‚â† 1):
    HasProdOnZ S f (z_prod S f) := (MultipliableOnZ.of_z_prod_ne_one h).hasProdOnZ

open Classical in
@[to_additive]
theorem HasProdOnZ.of_union [ContinuousMul Œ±] {S T: Set ‚Ñ§} {f: ‚Ñ§ ‚Üí Œ±} {s t: Œ±} (h: S ‚à© T = ‚àÖ) (hS: HasProdOnZ S f s) (hT: HasProdOnZ T f t):
    HasProdOnZ (S ‚à™ T) f (s * t) := by
  unfold HasProdOnZ at hS hT ‚ä¢
  simp_rw [prod_over_union_within_radius _ h f]
  exact Filter.Tendsto.mul hS hT

@[to_additive]
theorem HasProdOnZ.prod_const_one (S: Set ‚Ñ§): HasProdOnZ S (Œª _ ‚Ü¶ (1: Œ±)) 1 := by
  unfold HasProdOnZ prod_within_radius
  simp_rw [Finset.prod_const_one]
  exact tendsto_const_nhds

theorem HasProdOnZ.prod_div_range‚ÇÄ {Œ±: Type*} [CommGroupWithZero Œ±] [TopologicalSpace Œ±] [ContinuousMul Œ±] [HasContinuousInv‚ÇÄ Œ±] {f: ‚Ñ§ ‚Üí Œ±} {a b: Œ±}
    (ha: Tendsto (Œª n: ‚Ñï ‚Ü¶ f (-n: ‚Ñ§)) atTop (ùìù a)) (hb: Tendsto (Œª n: ‚Ñï ‚Ü¶ f n) atTop (ùìù b)) (hf: ‚àÄ n, f n ‚â† 0) (hb_ne_zero: b ‚â† 0):
    HasProdOnZ ‚ä§ (Œª n ‚Ü¶ f n / f (n + 1)) (a/b) := by
  unfold HasProdOnZ
  simp_rw [prod_within_radius_of_top_range_div‚ÇÄ _ _ hf]
  exact Filter.Tendsto.div ha hb hb_ne_zero

@[to_additive]
theorem HasProdOnZ.prod_div_range {Œ±: Type*} [CommGroup Œ±] [TopologicalSpace Œ±] [ContinuousMul Œ±] [ContinuousInv Œ±] {f: ‚Ñ§ ‚Üí Œ±} {a b: Œ±}
    (ha: Tendsto (Œª n: ‚Ñï ‚Ü¶ f (-n: ‚Ñ§)) atTop (ùìù a)) (hb: Tendsto (Œª n: ‚Ñï ‚Ü¶ f n) atTop (ùìù b)):
    HasProdOnZ ‚ä§ (Œª n ‚Ü¶ f n / f (n + 1)) (a/b) := by
  unfold HasProdOnZ
  simp_rw [prod_within_radius_of_top_range_div, div_eq_mul_inv]
  exact Filter.Tendsto.mul ha (Filter.Tendsto.inv hb)

@[to_additive]
theorem HasProdOnZ.prod [ContinuousMul Œ±] {f g : ‚Ñ§ ‚Üí Œ±} {a b: Œ±} {S: Set ‚Ñ§} (hf: HasProdOnZ S f a) (hg: HasProdOnZ S g b):
    HasProdOnZ S (f * g) (a * b) := by
  unfold HasProdOnZ
  simp_rw [prod_within_radius_of_prod]
  exact Filter.Tendsto.mul hf hg

@[to_additive]
theorem HasProdOnZ.inv {Œ±: Type*} [DivisionCommMonoid Œ±] [TopologicalSpace Œ±] [ContinuousInv Œ±] {f: ‚Ñ§ ‚Üí Œ±} {a: Œ±} {S: Set ‚Ñ§} (hf: HasProdOnZ S f a): HasProdOnZ S (f‚Åª¬π) (a‚Åª¬π) := by
  unfold HasProdOnZ
  simp_rw [prod_within_radius_of_inv]
  exact Filter.Tendsto.inv hf

@[to_additive]
theorem HasProdOnZ.div {Œ±: Type*} [CommGroup Œ±] [TopologicalSpace Œ±] [ContinuousMul Œ±] [ContinuousInv Œ±]  {f g: ‚Ñ§ ‚Üí Œ±} {a b: Œ±} {S: Set ‚Ñ§} (hf: HasProdOnZ S f a) (hg: HasProdOnZ S g b):
    HasProdOnZ S (f/g) (a/b) := by
  repeat rw [div_eq_mul_inv]
  exact HasProdOnZ.prod hf (HasProdOnZ.inv hg)

@[to_additive]
theorem HasProdOnZ.exchange_prod_finprod {Œ≤: Type*} [DecidableEq Œ≤] [ContinuousMul Œ±] {S: Set ‚Ñ§} {T: Finset Œ≤} {f: Œ≤ ‚Üí ‚Ñ§ ‚Üí Œ±} {g: Œ≤ ‚Üí Œ±}
    (h: ‚àÄ b ‚àà T, HasProdOnZ S (f b ¬∑) (g b)):
    HasProdOnZ S (‚àè b ‚àà T, f b ¬∑) (‚àè b ‚àà T, g b) := by
  induction' T using Finset.induction_on' with b T' _ _ h_nelem h_ind
  ¬∑ simp [HasProdOnZ.prod_const_one]
  ¬∑ simp_rw [Finset.prod_insert h_nelem]
    apply HasProdOnZ.prod
    exact h b <| Finset.mem_insert_self b T'
    apply h_ind
    intro b hb
    exact h b <| Finset.mem_insert_of_mem hb

@[to_additive]
theorem exchange_z_prod_finprod {Œ≤: Type*} [T2Space Œ±] [DecidableEq Œ≤] [ContinuousMul Œ±] {S: Set ‚Ñ§} {T: Finset Œ≤} {f : Œ≤ ‚Üí ‚Ñ§ ‚Üí Œ±}
    (h: ‚àÄ b ‚àà T, MultipliableOnZ S (f b ¬∑)): 
    ‚àè b ‚àà T, z_prod S (f b ¬∑) = z_prod S (‚àè b ‚àà T, f b ¬∑) := by
  let g := Œª b: Œ≤ ‚Ü¶ z_prod S (f b ¬∑)
  have h: ‚àÄ b ‚àà T, HasProdOnZ S (f b ¬∑) (g b) := Œª b hb ‚Ü¶ MultipliableOnZ.hasProdOnZ (h b hb)
  symm
  apply HasProdOnZ.z_prod_eq
  exact HasProdOnZ.exchange_prod_finprod h

@[to_additive]
theorem MultipliableOnZ.z_prod_prod [T2Space Œ±] [ContinuousMul Œ±] {S: Set ‚Ñ§} {f g: ‚Ñ§ ‚Üí Œ±} (hf: MultipliableOnZ S f) (hg: MultipliableOnZ S g):
    z_prod S (f * g) = z_prod S f * z_prod S g := by
  obtain ‚ü®a, ha‚ü© := hf
  obtain ‚ü®b, hb‚ü© := hg
  have h_fg_prod: HasProdOnZ S (f * g) (a * b) := HasProdOnZ.prod ha hb
  rw [HasProdOnZ.z_prod_eq ha, HasProdOnZ.z_prod_eq hb, HasProdOnZ.z_prod_eq h_fg_prod]

@[to_additive]
theorem MultipliableOnZ.z_prod_div {Œ±: Type*} [CommGroup Œ±] [TopologicalSpace Œ±] [T2Space Œ±] [ContinuousMul Œ±] [ContinuousInv Œ±]  {f g: ‚Ñ§ ‚Üí Œ±} {S: Set ‚Ñ§} (hf: MultipliableOnZ S f) (hg: MultipliableOnZ S g):
    z_prod S (f/g) = z_prod S f / z_prod S g := by
  obtain ‚ü®a, ha‚ü© := hf
  obtain ‚ü®b, hb‚ü© := hg
  have h_fg_prod: HasProdOnZ S (f / g) (a / b) := HasProdOnZ.div ha hb
  rw [HasProdOnZ.z_prod_eq ha, HasProdOnZ.z_prod_eq hb, HasProdOnZ.z_prod_eq h_fg_prod]

open Classical in
@[to_additive]
theorem z_prod_congr [T2Space Œ±] {S‚ÇÅ S‚ÇÇ: Set ‚Ñ§} {f‚ÇÅ f‚ÇÇ: ‚Ñ§ ‚Üí Œ±} (hS: S‚ÇÅ = S‚ÇÇ) (hf: ‚àÄ k ‚àà S‚ÇÇ, f‚ÇÅ k = f‚ÇÇ k): z_prod S‚ÇÅ f‚ÇÅ = z_prod S‚ÇÇ f‚ÇÇ :=
  if h: MultipliableOnZ S‚ÇÅ f‚ÇÅ then MultipliableOnZ.z_prod_congr hS hf h else by
  have h_f‚ÇÇ_not_multipliable: ¬¨MultipliableOnZ S‚ÇÇ f‚ÇÇ := (MultipliableOnZ.congr hS hf).not.mp h
  simp only [z_prod, h, ‚ÜìreduceDIte, h_f‚ÇÇ_not_multipliable]

notation3 "‚àè_‚Ñ§ "(...)", "r:67:(scoped f => z_prod ‚ä§ f) => r
notation3 "‚àè_‚Ñ§' "(...)", "r:67:(scoped f => z_prod ((‚ä§: Set ‚Ñ§) \ {0}) f) => r
notation3 "‚àë_‚Ñ§ "(...)", "r:67:(scoped f => z_sum ‚ä§ f) => r
notation3 "‚àë_‚Ñ§' "(...)", "r:67:(scoped f => z_sum ((‚ä§: Set ‚Ñ§) \ {0}) f) => r

def ‚Ñ§_neg := { x: ‚Ñ§ | x < 0 }
def ‚Ñ§_nonneg := { x: ‚Ñ§ | x ‚â• 0 }

open Classical in
@[to_additive]
theorem HasProdOnZ.of_nat_of_neg {S: Set ‚Ñ§} {a b: Œ±} {f: ‚Ñ§ ‚Üí Œ±}
    (h_nat: Tendsto (Œª N ‚Ü¶ ‚àè k ‚àà (Finset.range N).filter (Œª k: ‚Ñï ‚Ü¶ (k: ‚Ñ§) ‚àà S), f k) atTop (ùìù a))
    (h_neg: Tendsto (Œª N ‚Ü¶ ‚àè k ‚àà (Finset.range N).filter (Œª k: ‚Ñï ‚Ü¶ (-(k + 1): ‚Ñ§) ‚àà S), f (-(k + 1))) atTop (ùìù b)):
    HasProdOnZ S f (a * b) := by
  sorry


open Classical in
@[to_additive]
theorem HasProdOnZ.of_prod {S: Set ‚Ñ§} {a: Œ±} {f: ‚Ñ§ ‚Üí Œ±} (h: HasProd (Œª k ‚Ü¶ if k ‚àà S then f k else 1) a): HasProdOnZ S f a := by
  unfold HasProd at h
  unfold HasProdOnZ
  let f' := Œª k ‚Ü¶ if k ‚àà S then f k else 1
  simp_rw [show ‚àÄ r: ‚Ñï, prod_within_radius r S f = ‚àè k ‚àà Finset.Ico (-r: ‚Ñ§) r, f' k by
    intro r
    unfold prod_within_radius
    rw [Finset.prod_ite f (Œª _ ‚Ü¶ 1), Finset.prod_const_one, mul_one]
  ]
  rw [atTop_basis.tendsto_iff <| nhds_basis_opens a] at h ‚ä¢
  intro b b_open_around_a
  obtain ‚ü®S, hS‚ü© := h b b_open_around_a
  let R: ‚Ñï := if h_nonempty: S.Nonempty then 1 + (Finset.image Int.natAbs S).max' (Finset.image_nonempty.mpr h_nonempty) else 0
  have h_contained (r: ‚Ñï) (hr: r ‚â• R): S ‚äÜ Finset.Ico (-r: ‚Ñ§) r := by
    intro x x_elem
    have h_nonempty: S.Nonempty := Finset.nonempty_of_ne_empty <| Finset.ne_empty_of_mem x_elem
    have h_x_natAbs: x.natAbs < R := by
      unfold R
      simp only [h_nonempty, ‚ÜìreduceDIte]
      have h_elem: x.natAbs ‚àà Finset.image Int.natAbs S := Finset.mem_image_of_mem Int.natAbs x_elem
      have := Finset.le_max' (Finset.image Int.natAbs S) x.natAbs h_elem
      exact Nat.lt_one_add_iff.mpr this
    rw [Finset.mem_Ico]
    omega
  use R
  constructor
  trivial
  intro r hr
  exact hS.right (Finset.Ico (-r: ‚Ñ§) r) (h_contained r hr)

open Classical in
@[to_additive]
theorem MultipliableOnZ.of_multipliable {S: Set ‚Ñ§} {f: ‚Ñ§ ‚Üí Œ±} (h: Multipliable (Œª k ‚Ü¶ if k ‚àà S then f k else 1)): MultipliableOnZ S f :=
  HasProdOnZ.multipliableOnZ <| HasProdOnZ.of_prod <| Multipliable.hasProd h

open Classical in
@[to_additive]
theorem z_prod_eq_tprod_of_multipliable [T2Space Œ±] {S: Set ‚Ñ§} {f: ‚Ñ§ ‚Üí Œ±} (h: Multipliable (Œª k ‚Ü¶ if k ‚àà S then f k else 1)):
    z_prod S f = ‚àè' k, if k ‚àà S then f k else 1 := by
  let f' := Œª k ‚Ü¶ if k ‚àà S then f k else 1
  have h_multipliableOnZ: MultipliableOnZ S f := MultipliableOnZ.of_multipliable h
  have h_hasProd: HasProd f' (‚àè' k, f' k) := by exact Multipliable.hasProd h
  have h_hasProdOnZ_prod: HasProdOnZ S f (‚àè' k, f' k) := by exact HasProdOnZ.of_prod h_hasProd
  apply HasProdOnZ.z_prod_eq h_hasProdOnZ_prod

@[to_additive]
theorem z_prod'_eq_tprod_of_multipliable_of_pos_of_neg [T2Space Œ±] {f: ‚Ñ§ ‚Üí Œ±} (h: Multipliable (Œª k ‚Ü¶ if k = 0 then 1 else f k)):
    ‚àè_‚Ñ§' k, f k = ‚àè' k: ‚Ñï, (f (k + 1) * f (-(k + 1): ‚Ñ§)) := by
  sorry

theorem HasSumOnZ.const_mul {Œ±: Type*} [CommRing Œ±] [TopologicalSpace Œ±] [ContinuousMul Œ±] {S: Set ‚Ñ§} {a: Œ±} {f: ‚Ñ§ ‚Üí Œ±} (h: HasSumOnZ S f a) (c: Œ±): HasSumOnZ S (Œª k ‚Ü¶ c * f k) (c * a) := by
  unfold HasSumOnZ
  unfold sum_within_radius
  simp_rw [‚ÜêFinset.mul_sum]
  exact Tendsto.mul tendsto_const_nhds h

theorem SummableOnZ.const_mul {Œ±: Type*} [CommRing Œ±] [TopologicalSpace Œ±] [ContinuousMul Œ±] {S: Set ‚Ñ§} {f: ‚Ñ§ ‚Üí Œ±} (c: Œ±):
    SummableOnZ S f ‚Üí SummableOnZ S (Œª k ‚Ü¶ c * f k) :=
  Œª ‚ü®a, ha‚ü© ‚Ü¶ ‚ü®c * a, HasSumOnZ.const_mul ha c‚ü©

theorem SummableOnZ.const_mul_iff {Œ±: Type*} [Field Œ±] [TopologicalSpace Œ±] [ContinuousMul Œ±] {S: Set ‚Ñ§} {f: ‚Ñ§ ‚Üí Œ±} {c: Œ±} (hc: c ‚â† 0):
    SummableOnZ S f ‚Üî SummableOnZ S (Œª k ‚Ü¶ c * f k) := by
  constructor
  exact SummableOnZ.const_mul c
  intro h_summable
  rw [show f = Œª k ‚Ü¶ c‚Åª¬π * (c * f k) by
    funext k
    rw [‚Üêmul_assoc, inv_mul_cancel‚ÇÄ hc, one_mul]
  ]
  exact SummableOnZ.const_mul (c‚Åª¬π) h_summable

theorem SummableOnZ.z_sum_const_mul {Œ±: Type*} [CommRing Œ±] [TopologicalSpace Œ±] [T2Space Œ±] [ContinuousMul Œ±] {S: Set ‚Ñ§} {f: ‚Ñ§ ‚Üí Œ±} {c: Œ±} (h: SummableOnZ S f):
    z_sum S (Œª k ‚Ü¶ c * f k) = c * z_sum S f := by
  obtain ‚ü®a, ha‚ü© := h
  rw [ha.z_sum_eq, (ha.const_mul c).z_sum_eq]

open Classical in
theorem z_sum_const_mul {Œ±: Type*} [Field Œ±] [TopologicalSpace Œ±] [T2Space Œ±] [ContinuousMul Œ±] {S: Set ‚Ñ§} {f: ‚Ñ§ ‚Üí Œ±} {c: Œ±}:
    z_sum S (Œª k ‚Ü¶ c * f k) = c * z_sum S f :=
  if h_zero: c = 0 then by
    simp_rw [h_zero, zero_mul]
    exact (HasSumOnZ.sum_const_zero S).z_sum_eq
  else if h_summable: SummableOnZ S f then
    SummableOnZ.z_sum_const_mul h_summable
  else by
    have h_cf_not_summable := (SummableOnZ.const_mul_iff h_zero).not.mp h_summable
    simp [z_sum_def, h_summable, h_cf_not_summable]

@[to_additive]
theorem HasProdOnZ.of_singleton (f: ‚Ñ§ ‚Üí Œ±) (b: ‚Ñ§): HasProdOnZ {b} f (f b) := by
  apply tendsto_nhds_of_eventually_eq
  rw [eventually_atTop]
  use b.natAbs + 1
  intro n hn
  have h_set: (Finset.Ico (-n: ‚Ñ§) n).filter (¬∑ ‚àà ({b}: Set ‚Ñ§)) = { b } := by
    ext x
    constructor
    simp only [Set.mem_singleton_iff, Finset.mem_filter, Finset.mem_Ico, Finset.mem_singleton,
      and_imp, imp_self, implies_true]
    simp only [Finset.mem_singleton, Set.mem_singleton_iff, Finset.mem_filter, Finset.mem_Ico]
    omega
  unfold prod_within_radius
  rw [‚ÜêFinset.prod_singleton f b]
  congr
  convert h_set

@[to_additive]
theorem MultipliableOnZ.of_singleton (f: ‚Ñ§ ‚Üí Œ±) (b: ‚Ñ§): MultipliableOnZ ({b}: Set ‚Ñ§) f := (HasProdOnZ.of_singleton f b).multipliableOnZ

open Classical in
@[to_additive]
lemma prod_within_radius_of_sdiff {Œ±: Type*} [CommGroup Œ±] {S T: Set ‚Ñ§} (r: ‚Ñï) (f: ‚Ñ§ ‚Üí Œ±) (h_subset: T ‚äÜ S):
    prod_within_radius r (S \ T) f * prod_within_radius r T f = prod_within_radius r S f := by
  unfold prod_within_radius
  let S' := (Finset.Ico (-r: ‚Ñ§) r).filter (¬∑ ‚àà S)
  let T' := (Finset.Ico (-r: ‚Ñ§) r).filter (¬∑ ‚àà T)
  replace h_subset: T' ‚äÜ S' := by
    unfold S' T'
    intro x hT
    rw [Finset.mem_filter] at hT ‚ä¢
    exact ‚ü®hT.left, h_subset hT.right‚ü©
  have h_sdiff: S' \ T' = (Finset.Ico (-r: ‚Ñ§) r).filter (¬∑ ‚àà S \ T) := by
    aesop
  refold_let S'  T'
  have h_sdiff_prod := Finset.prod_sdiff (f := f) h_subset 
  rw [h_sdiff] at h_sdiff_prod
  convert h_sdiff_prod

@[to_additive]
theorem HasProdOnZ.of_sdiff {Œ±: Type*} [CommGroup Œ±] [TopologicalSpace Œ±] [ContinuousDiv Œ±] {S T: Set ‚Ñ§} {s t: Œ±} {f: ‚Ñ§ ‚Üí Œ±}
    (h_subset: T ‚äÜ S) (hS: HasProdOnZ S f s) (hT: HasProdOnZ T f t):
    HasProdOnZ (S \ T) f (s / t) := by
  unfold HasProdOnZ
  have h_prod_radius (r: ‚Ñï) := eq_div_iff_mul_eq'.mpr <| prod_within_radius_of_sdiff r f h_subset
  simp_rw [h_prod_radius]
  apply Tendsto.div' hS hT

@[to_additive]
theorem MultipliableOnZ.of_union [ContinuousMul Œ±] {S T: Set ‚Ñ§} {f: ‚Ñ§ ‚Üí Œ±} (h: S ‚à© T = ‚àÖ): MultipliableOnZ S f ‚Üí MultipliableOnZ T f ‚Üí
    MultipliableOnZ (S ‚à™ T) f := Œª ‚ü®s, hS‚ü© ‚ü®t, hT‚ü© ‚Ü¶ ‚ü®s * t, HasProdOnZ.of_union h hS hT‚ü©

@[to_additive]
theorem MultipliableOnZ.of_union_iff {Œ±: Type*} [CommGroup Œ±] [TopologicalSpace Œ±] [ContinuousMul Œ±] [ContinuousDiv Œ±] {S T: Set ‚Ñ§} {f: ‚Ñ§ ‚Üí Œ±} (h: S ‚à© T = ‚àÖ) (h_multipliable: MultipliableOnZ S f):
    MultipliableOnZ (S ‚à™ T) f ‚Üî MultipliableOnZ T f := by
  constructor
  intro h_multipliable_union
  rw [show T = (S ‚à™ T) \ S from Eq.symm (Set.union_diff_cancel_left (Set.subset_empty_iff.mpr h))]
  obtain ‚ü®s, hs‚ü© := h_multipliable
  obtain ‚ü®st, hst‚ü© := h_multipliable_union
  use st / s
  exact HasProdOnZ.of_sdiff Set.subset_union_left hst hs
  exact Œª hT ‚Ü¶ MultipliableOnZ.of_union h h_multipliable hT

@[to_additive]
lemma eq_z_prod_of_mul_of_z_prod'_of_eval_zero {Œ±: Type*} [CommGroup Œ±] [TopologicalSpace Œ±] [ContinuousMul Œ±] [ContinuousDiv Œ±] [T2Space Œ±]
    {f: ‚Ñ§ ‚Üí Œ±} (h: MultipliableOnZ (‚ä§ \ {0}) f): ‚àè_‚Ñ§ k, f k = (‚àè_‚Ñ§' k, f k) * f 0 := by
  have h_union: ‚ä§ = ((‚ä§: Set ‚Ñ§) \ { 0 }) ‚à™ { 0 } := Eq.symm <| Set.diff_union_of_subset (Œª _ _ ‚Ü¶ trivial)
  obtain ‚ü®a, ha‚ü© := h
  have h_prod := HasProdOnZ.of_union Set.diff_inter_self ha (HasProdOnZ.of_singleton f 0) 
  rw [‚Üêha.z_prod_eq] at h_prod
  convert h_prod.z_prod_eq

@[to_additive]
lemma eq_z_prod_of_mul_of_z_prod'_of_eval_zero' {Œ±: Type*} [CommGroup Œ±] [TopologicalSpace Œ±] [ContinuousMul Œ±] [ContinuousDiv Œ±] [T2Space Œ±] 
    {f: ‚Ñ§ ‚Üí Œ±} (h: MultipliableOnZ ‚ä§ f): ‚àè_‚Ñ§ k, f k = (‚àè_‚Ñ§' k, f k) * f 0 := by
  rw [show ‚ä§ = {0} ‚à™ ((‚ä§: Set ‚Ñ§) \ {0}) by aesop] at h
  apply eq_z_prod_of_mul_of_z_prod'_of_eval_zero
  exact (MultipliableOnZ.of_union_iff (Set.inter_diff_self {0} ‚ä§) (MultipliableOnZ.of_singleton f 0)).mp h
