import Mathlib.Algebra.BigOperators.Group.Finset.Defs
import Mathlib.Data.Int.Interval
import Mathlib.Order.Filter.AtTopBot.Defs
import Mathlib.Topology.Algebra.Group.Defs
import Mathlib.Topology.Algebra.GroupWithZero
import Mathlib.Topology.Algebra.Monoid
import Mathlib.Topology.Defs.Filter
import Mathlib.Topology.Algebra.InfiniteSum.Defs

open Filter Function Topology

variable {Œ±: Type*} [CommMonoid Œ±]

open Classical in
@[to_additive]
noncomputable def prod_within_radius (r: ‚Ñï) (S: Set ‚Ñ§) (f: ‚Ñ§ ‚Üí Œ±): Œ± :=
  ‚àè i ‚àà (Finset.Icc (-r: ‚Ñ§) r).filter (¬∑ ‚àà S), f i

open Classical in
@[to_additive]
lemma prod_over_union_within_radius (r: ‚Ñï) {S T: Set ‚Ñ§} (h: S ‚à© T = ‚àÖ) (f: ‚Ñ§ ‚Üí Œ±):
    prod_within_radius r (S ‚à™ T) f = (prod_within_radius r S f) * (prod_within_radius r T f) := by
  unfold prod_within_radius
  rw [‚ÜêFinset.prod_union]
  congr
  rw [‚ÜêFinset.filter_or]
  simp_rw [Set.mem_union]
  rw [Finset.disjoint_filter]
  intro _ _ hS hT
  simpa [h] using Set.mem_inter hS hT

open Classical in
@[to_additive]
lemma prod_within_radius_of_top (r: ‚Ñï) (f: ‚Ñ§ ‚Üí Œ±):
    prod_within_radius r ‚ä§ f = ‚àè i ‚àà Finset.Icc (-r: ‚Ñ§) r, f i := by
  unfold prod_within_radius
  congr
  apply Finset.filter_true_of_mem (Œª _ _ ‚Ü¶ by trivial)

@[to_additive]
lemma prod_within_radius_of_prod (r: ‚Ñï) (S: Set ‚Ñ§) (f g: ‚Ñ§ ‚Üí Œ±):
    prod_within_radius r S (f * g) = prod_within_radius r S f * prod_within_radius r S g := Finset.prod_mul_distrib

@[to_additive]
lemma prod_within_radius_of_top_split_neg_nonneg (r: ‚Ñï) (f: ‚Ñ§ ‚Üí Œ±):
    prod_within_radius r ‚ä§ f = (‚àè i ‚àà Finset.range r, f (-(i + 1))) * (‚àè i ‚àà Finset.range (r + 1), f i) := by
  rw [prod_within_radius_of_top]
  have := Finset.Ico_union_Ico_eq_Ico
    (show (-r: ‚Ñ§) ‚â§ 0 from Int.neg_natCast_le_ofNat r 0) (show (0: ‚Ñ§) ‚â§ (r + 1) from Int.zero_le_ofNat (r + 1))
  rw [show Finset.Icc (-r: ‚Ñ§) r = Finset.Ico (-r: ‚Ñ§) (r + 1) by rfl]
  rw [‚Üêthis]
  rw [Finset.prod_union]
  have h_neg: ‚àè i ‚àà Finset.Ico (-r: ‚Ñ§) 0, f i = ‚àè i ‚àà Finset.range r, f (-(i + 1)) := by
    rw [Finset.prod_bij (Œª r _ ‚Ü¶ (-r - 1).toNat)]
    ¬∑ intro a ha
      rw [Finset.mem_Ico] at ha
      rw [Finset.mem_range]
      omega
    ¬∑ intro a‚ÇÅ ha‚ÇÅ a‚ÇÇ ha‚ÇÇ
      rw [Finset.mem_Ico] at ha‚ÇÅ ha‚ÇÇ
      omega
    ¬∑ intro b hb
      use (-b: ‚Ñ§) - 1
      rw [Finset.mem_range] at hb
      rw [exists_prop, Finset.mem_Ico]
      omega
    ¬∑ intro a ha
      congr
      rw [Finset.mem_Ico] at ha
      omega
  have h_pos: ‚àè i ‚àà Finset.Ico (0: ‚Ñ§) (r + 1), f i = ‚àè i ‚àà Finset.range (r + 1), f i := by
    apply Finset.prod_bij (Œª r _ ‚Ü¶ r.toNat)
    ¬∑ intro a ha
      rw [Finset.mem_Ico] at ha
      rw [Finset.mem_range]
      omega
    ¬∑ intro a‚ÇÅ ha‚ÇÅ a‚ÇÇ ha‚ÇÇ
      rw [Finset.mem_Ico] at ha‚ÇÅ ha‚ÇÇ
      omega
    ¬∑ intro b hb
      use b
      rw [exists_prop, Finset.mem_Ico]
      rw [Finset.mem_range] at hb
      omega
    ¬∑ intro a ha
      congr
      rw [Finset.mem_Ico] at ha
      omega
  rw [h_neg, h_pos]
  rw [Finset.disjoint_iff_ne]
  intro a ha b hb
  rw [Finset.mem_Ico] at ha hb
  omega

@[to_additive]
lemma prod_of_set_eq {Œ≤: Type*} {A B: Finset Œ≤} {f: Œ≤ ‚Üí Œ±} (h: A = B): ‚àè i ‚àà A, f i = ‚àè i ‚àà B, f i := by congr

@[to_additive]
lemma prod_within_radius_of_top_range_div {Œ±: Type*} [CommGroup Œ±] (r: ‚Ñï) (f: ‚Ñ§ ‚Üí Œ±):
    prod_within_radius r ‚ä§ (Œª n ‚Ü¶ (f n) / (f (n + 1))) = (f (-r: ‚Ñ§)) / (f (r + 1)) := by
  rw [prod_within_radius_of_top]
  induction' r with r hr
  simp
  have h_union: Finset.Icc (-(r + 1): ‚Ñ§) (r + 1) = {(-(r + 1): ‚Ñ§)} ‚à™ Finset.Icc (-r: ‚Ñ§) r ‚à™ {((r + 1): ‚Ñ§)} := by sorry
  rw_mod_cast [prod_of_set_eq h_union] 
  rw [Finset.prod_union, Finset.prod_union, hr, Finset.prod_singleton, Finset.prod_singleton]
  rw [Int.neg_ofNat_eq_negSucc_add_one_iff.mpr rfl]
  simp [div_eq_mul_inv, mul_assoc]
  all_goals {
    rw [Finset.disjoint_iff_ne] 
    intro a ha b hb
    simp only [Finset.mem_union, Finset.mem_singleton, Finset.mem_Icc] at *
    omega
  }

lemma prod_within_radius_of_top_range_div‚ÇÄ {Œ±: Type*} [CommGroupWithZero Œ±] (r: ‚Ñï) (f: ‚Ñ§ ‚Üí Œ±) (h: ‚àÄ n, f n ‚â† 0):
    prod_within_radius r ‚ä§ (Œª n ‚Ü¶ (f n) / (f (n + 1))) = (f (-r: ‚Ñ§)) / (f (r + 1)) := by
  rw [prod_within_radius_of_top]
  induction' r with r hr
  simp
  have h_union: Finset.Icc (-(r + 1): ‚Ñ§) (r + 1) = {(-(r + 1): ‚Ñ§)} ‚à™ Finset.Icc (-r: ‚Ñ§) r ‚à™ {((r + 1): ‚Ñ§)} := by sorry
  rw_mod_cast [prod_of_set_eq h_union] 
  rw [Finset.prod_union, Finset.prod_union, hr, Finset.prod_singleton, Finset.prod_singleton]
  rw [Int.neg_ofNat_eq_negSucc_add_one_iff.mpr rfl]
  simp [div_eq_mul_inv, mul_assoc, h]
  all_goals {
    rw [Finset.disjoint_iff_ne] 
    intro a ha b hb
    simp only [Finset.mem_union, Finset.mem_singleton, Finset.mem_Icc] at *
    omega
  }

variable [TopologicalSpace Œ±]

open Classical in
@[to_additive]
def HasProdOnZ (S: Set ‚Ñ§) (f: ‚Ñ§ ‚Üí Œ±) (a: Œ±): Prop :=
  Filter.Tendsto (prod_within_radius ¬∑ S f) atTop (ùìù a)

@[to_additive]
def MultipliableOnZ (S: Set ‚Ñ§) (f: ‚Ñ§ ‚Üí Œ±): Prop :=
  ‚àÉ a, HasProdOnZ S f a

@[to_additive]
theorem HasProdOnZ.multipliableOnZ {S: Set ‚Ñ§} {f: ‚Ñ§ ‚Üí Œ±} {a: Œ±} (h: HasProdOnZ S f a):
    MultipliableOnZ S f := sorry

open Classical in
@[to_additive]
noncomputable irreducible_def z_prod (S: Set ‚Ñ§) (f: ‚Ñ§ ‚Üí Œ±): Œ± :=
  if h: MultipliableOnZ S f then h.choose else 1

@[to_additive]
theorem HasProdOnZ.unique [T2Space Œ±] {S: Set ‚Ñ§} {f: ‚Ñ§ ‚Üí Œ±} {a‚ÇÅ a‚ÇÇ: Œ±}:
    HasProdOnZ S f a‚ÇÅ ‚Üí HasProdOnZ S f a‚ÇÇ ‚Üí a‚ÇÅ = a‚ÇÇ := by
  classical exact tendsto_nhds_unique

@[to_additive]
theorem MultipliableOnZ.of_z_prod_ne_one {S: Set ‚Ñ§} {f: ‚Ñ§ ‚Üí Œ±} (h: z_prod S f ‚â† 1):
    MultipliableOnZ S f := by
  by_contra h_not_multiplialbe
  simp [z_prod, h_not_multiplialbe] at h

@[to_additive]
theorem MultipliableOnZ.hasProdOnZ {S: Set ‚Ñ§} {f: ‚Ñ§ ‚Üí Œ±} (h: MultipliableOnZ S f):
    HasProdOnZ S f (z_prod S f) := by
  simp only [z_prod, h, dite_true, h.choose_spec]

@[to_additive]
theorem HasProdOnZ.z_prod_eq [T2Space Œ±] {S: Set ‚Ñ§} {f: ‚Ñ§ ‚Üí Œ±} {a: Œ±} (h: HasProdOnZ S f a): z_prod S f = a :=
  (MultipliableOnZ.hasProdOnZ ‚ü®a, h‚ü©).unique h

@[to_additive]
theorem HasProdOnZ.of_z_prod_ne_one {S: Set ‚Ñ§} {f: ‚Ñ§ ‚Üí Œ±} (h: z_prod S f ‚â† 1):
    HasProdOnZ S f (z_prod S f) := (MultipliableOnZ.of_z_prod_ne_one h).hasProdOnZ

open Classical in
@[to_additive]
theorem HasProdOnZ.of_union [ContinuousMul Œ±] {S T: Set ‚Ñ§} {f: ‚Ñ§ ‚Üí Œ±} {s t: Œ±} (h: S ‚à© T = ‚àÖ) (hS: HasProdOnZ S f s) (hT: HasProdOnZ T f t):
    HasProdOnZ (S ‚à™ T) f (s * t) := by
  unfold HasProdOnZ at hS hT ‚ä¢
  simp_rw [prod_over_union_within_radius _ h f]
  exact Filter.Tendsto.mul hS hT

@[to_additive]
theorem HasProdOnZ.prod_const_one (S: Set ‚Ñ§): HasProdOnZ S (Œª _ ‚Ü¶ (1: Œ±)) 1 := by
  unfold HasProdOnZ prod_within_radius
  simp_rw [Finset.prod_const_one]
  exact tendsto_const_nhds

open Classical in
@[to_additive]
theorem HasProdOnZ.hasProd {S: Set ‚Ñ§} {f: ‚Ñ§ ‚Üí Œ±} {a: Œ±} (h_nonneg: ‚àÄ s ‚àà S, s ‚â• 0) (h: HasProdOnZ S f a):
    HasProd (Œª n ‚Ü¶ if n ‚àà S then f n else 1) a := by
  sorry

@[to_additive]
theorem hasProdOnZ_of_hasProd {f: ‚Ñ§ ‚Üí Œ±} {a: Œ±} (h: HasProd f a): HasProdOnZ ‚ä§ f a := by
  sorry

@[to_additive]
theorem hasProdOnZ_nat_of_hasProd_nat {f: ‚Ñ§ ‚Üí Œ±} {a: Œ±} (h: HasProd (Œª n: ‚Ñï ‚Ü¶ f n) a): HasProdOnZ ‚ä§ f a := by
  sorry

-- @[to_additive]
-- theorem hasProdOnZ_nat_of_hasProd_nat {f: ‚Ñ§ ‚Üí Œ±}

theorem HasProdOnZ.prod_div_range‚ÇÄ {Œ±: Type*} [CommGroupWithZero Œ±] [TopologicalSpace Œ±] [ContinuousMul Œ±] [HasContinuousInv‚ÇÄ Œ±] {f: ‚Ñ§ ‚Üí Œ±} {a b: Œ±}
    (ha: Tendsto (Œª n: ‚Ñï ‚Ü¶ f (-n: ‚Ñ§)) atTop (ùìù a)) (hb: Tendsto (Œª n: ‚Ñï ‚Ü¶ f n) atTop (ùìù b)) (hf: ‚àÄ n, f n ‚â† 0) (hb_ne_zero: b ‚â† 0):
    HasProdOnZ ‚ä§ (Œª n ‚Ü¶ f n / f (n + 1)) (a/b) := by
  unfold HasProdOnZ
  simp_rw [prod_within_radius_of_top_range_div‚ÇÄ _ _ hf]
  apply Filter.Tendsto.div ha _ hb_ne_zero
  exact (tendsto_add_atTop_iff_nat 1).mpr hb

@[to_additive]
theorem HasProdOnZ.prod_div_range {Œ±: Type*} [CommGroup Œ±] [TopologicalSpace Œ±] [ContinuousMul Œ±] [ContinuousInv Œ±] {f: ‚Ñ§ ‚Üí Œ±} {a b: Œ±}
    (ha: Tendsto (Œª n: ‚Ñï ‚Ü¶ f (-n: ‚Ñ§)) atTop (ùìù a)) (hb: Tendsto (Œª n: ‚Ñï ‚Ü¶ f n) atTop (ùìù b)):
    HasProdOnZ ‚ä§ (Œª n ‚Ü¶ f n / f (n + 1)) (a/b) := by
  unfold HasProdOnZ
  simp_rw [prod_within_radius_of_top_range_div, div_eq_mul_inv]
  apply Filter.Tendsto.mul ha
  exact_mod_cast (tendsto_add_atTop_iff_nat 1).mpr <| Filter.Tendsto.inv hb

@[to_additive]
theorem HasProdOnZ.prod [ContinuousMul Œ±] {f g : ‚Ñ§ ‚Üí Œ±} {a b: Œ±} {S: Set ‚Ñ§} (hf: HasProdOnZ S f a) (hg: HasProdOnZ S g b):
    HasProdOnZ S (f * g) (a * b) := by
  unfold HasProdOnZ
  simp_rw [prod_within_radius_of_prod]
  exact Filter.Tendsto.mul hf hg

@[to_additive]
theorem HasProdOnZ.exchange_prod_finprod {Œ≤: Type*} [DecidableEq Œ≤] [ContinuousMul Œ±] {S: Set ‚Ñ§} {T: Finset Œ≤} {f: Œ≤ ‚Üí ‚Ñ§ ‚Üí Œ±} {g: Œ≤ ‚Üí Œ±}
    (h: ‚àÄ b ‚àà T, HasProdOnZ S (f b ¬∑) (g b)):
    HasProdOnZ S (‚àè b ‚àà T, f b ¬∑) (‚àè b ‚àà T, g b) := by
  induction' T using Finset.induction_on' with b T' _ _ h_nelem h_ind
  ¬∑ simp [HasProdOnZ.prod_const_one]
  ¬∑ simp_rw [Finset.prod_insert h_nelem]
    apply HasProdOnZ.prod
    exact h b <| Finset.mem_insert_self b T'
    apply h_ind
    intro b hb
    exact h b <| Finset.mem_insert_of_mem hb

@[to_additive]
theorem exchange_z_prod_finprod {Œ≤: Type*} [T2Space Œ±] [DecidableEq Œ≤] [ContinuousMul Œ±] {S: Set ‚Ñ§} {T: Finset Œ≤} {f : Œ≤ ‚Üí ‚Ñ§ ‚Üí Œ±}
    (h: ‚àÄ b ‚àà T, MultipliableOnZ S (f b ¬∑)): 
    ‚àè b ‚àà T, z_prod S (f b ¬∑) = z_prod S (‚àè b ‚àà T, f b ¬∑) := by
  let g := Œª b: Œ≤ ‚Ü¶ z_prod S (f b ¬∑)
  have h: ‚àÄ b ‚àà T, HasProdOnZ S (f b ¬∑) (g b) := Œª b hb ‚Ü¶ MultipliableOnZ.hasProdOnZ (h b hb)
  symm
  apply HasProdOnZ.z_prod_eq
  exact HasProdOnZ.exchange_prod_finprod h

notation3 "‚àè_‚Ñ§ "(...)", "r:67:(scoped f => z_prod ‚ä§ f) => r
notation3 "‚àè_‚Ñ§' "(...)", "r:67:(scoped f => z_prod ((‚ä§: Set ‚Ñ§) \ {0}) f) => r
notation3 "‚àë_‚Ñ§ "(...)", "r:67:(scoped f => z_sum ‚ä§ f) => r
notation3 "‚àë_‚Ñ§' "(...)", "r:67:(scoped f => z_sum ((‚ä§: Set ‚Ñ§) \ {0}) f) => r
