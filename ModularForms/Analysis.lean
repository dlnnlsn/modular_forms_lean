import Mathlib.Analysis.RCLike.Basic
import Mathlib.Analysis.Normed.Group.InfiniteSum
import Mathlib.Analysis.NormedSpace.FunctionSeries
import Mathlib.Analysis.SpecialFunctions.Exp
import Mathlib.Data.Complex.Exponential
import Mathlib.Topology.Instances.ENNReal.Lemmas

open Filter Topology Metric

--TODO: Convert this to the multiplicative version and use @[to_additive]
theorem sum_tail_tends_to_zero_of_summable {Œ±: Type*} [AddCommGroup Œ±] [TopologicalSpace Œ±] [IsTopologicalAddGroup Œ±] [T2Space Œ±] {f: ‚Ñï ‚Üí Œ±} (h: Summable f):
    Tendsto (Œª N: ‚Ñï ‚Ü¶ ‚àë' i: ‚Ñï, f (i + N)) atTop (ùìù 0) := by
  simp_rw [Œª N ‚Ü¶ eq_sub_of_add_eq' <| Summable.sum_add_tsum_nat_add N h]
  rw [‚Üêsub_self <| tsum f]
  apply Filter.Tendsto.const_sub
  exact Summable.tendsto_sum_tsum_nat h

theorem interchange_limit_sum_of_dominated_convergence {Œ±: Type*} [RCLike Œ±] {f: ‚Ñï ‚Üí ‚Ñï ‚Üí Œ±} {M: ‚Ñï ‚Üí ‚Ñù} {f_lim: ‚Ñï ‚Üí Œ±}
  (h_lim: ‚àÄ k, Tendsto (f k ¬∑) atTop (ùìù (f_lim k)))
  (h_bound: ‚àÄ k, ‚àÄ n, ‚Äñf k n‚Äñ ‚â§ M k)
  (h_M_summable: Summable M)
  : Tendsto (‚àë' k, f k ¬∑) atTop (ùìù <| ‚àë' k, f_lim k)
:= by
  -- have M_k_nonneg: 0 ‚â§ M := Œª k ‚Ü¶ le_trans (norm_nonneg <| f k 0) (h_bound k 0)
  have f_summable (n: ‚Ñï): Summable (f ¬∑ n) := Summable.of_norm_bounded M h_M_summable (Œª k ‚Ü¶ h_bound k n)
  have norm_f_lim_le_M: norm ‚àò f_lim ‚â§ M := by
    intro k
    have: Tendsto (Œª _: ‚Ñï ‚Ü¶ M k) atTop (ùìù <| M k) := by exact tendsto_const_nhds
    exact le_of_tendsto_of_tendsto' (Tendsto.norm <| h_lim k) this (h_bound k)
  have f_lim_summable: Summable f_lim := Summable.of_norm_bounded M h_M_summable norm_f_lim_le_M
  have f_lim_norm_summable: Summable (norm ‚àò f_lim) := Summable.of_nonneg_of_le (Œª _ ‚Ü¶ norm_nonneg _) norm_f_lim_le_M h_M_summable
  simp_rw [atTop_basis.tendsto_iff nhds_basis_ball, Set.mem_Ici, mem_ball, true_and]
  intro Œµ Œµ_pos
  have sum_M_tail_tendsto_zero := sum_tail_tends_to_zero_of_summable h_M_summable
  rw [atTop_basis.tendsto_iff <| nhds_basis_Ioo_pos 0] at sum_M_tail_tendsto_zero
  obtain ‚ü®N_M, hN_M‚ü© := sum_M_tail_tendsto_zero (Œµ/3) (by positivity)
  simp only [true_and, Set.mem_Ici, zero_sub, zero_add, Set.mem_Ioo] at hN_M
  replace hN_M := And.right <| hN_M (N_M + 1) (Nat.le_succ _)
  have f_norm_summable (n: ‚Ñï): Summable (Œª k ‚Ü¶ ‚Äñf k n‚Äñ) := Summable.of_nonneg_of_le (Œª _ ‚Ü¶ norm_nonneg _) (Œª k ‚Ü¶ h_bound k n) h_M_summable
  replace f_norm_summable := Œª n ‚Ü¶ (summable_nat_add_iff (N_M + 1)).mpr <| f_norm_summable n
  replace h_M_summable := (summable_nat_add_iff (N_M + 1)).mpr h_M_summable
  replace f_lim_norm_summable := (summable_nat_add_iff (N_M + 1)).mpr f_lim_norm_summable
  have fk_bound (k: ‚Ñï): ‚àÉ Nk, ‚àÄ n ‚â• Nk, ‚Äñf k n - f_lim k‚Äñ ‚â§ Œµ/(3*(N_M + 1)) := by
    have f_k_limit: Tendsto (Œª n ‚Ü¶ ‚Äñf k n - f_lim k‚Äñ) atTop (ùìù 0) := by
      rw [show 0 = ‚Äñ(0: Œ±)‚Äñ from Eq.symm norm_zero]
      apply Tendsto.norm
      rw [‚Üêsub_self (f_lim k)]
      exact Tendsto.sub (h_lim k) tendsto_const_nhds
    rw [atTop_basis.tendsto_iff <| nhds_basis_Ioo_pos 0] at f_k_limit
    obtain ‚ü®Nk, hNk‚ü© := f_k_limit (Œµ/(3*(N_M + 1))) (by positivity)
    simp only [Set.mem_Ici, zero_sub, zero_add, Set.mem_Ioo, true_and] at hNk
    use Nk
    intro n hn
    exact le_of_lt (hNk n hn).right
  let N_k: ‚Ñï ‚Üí ‚Ñï := Œª k ‚Ü¶ (fk_bound k).choose
  let N_k_max := Finset.max' (Finset.image N_k <| Finset.range (N_M + 1)) (Finset.image_nonempty.mpr Finset.nonempty_range_succ)
  let N := max N_M N_k_max
  use N
  intro n hn
  rw [NormedAddGroup.dist_eq]
  calc
    ‚Äñ‚àë' k, f k n - ‚àë' k, f_lim k‚Äñ = ‚Äñ(‚àë k ‚àà Finset.range (N_M + 1), f k n - ‚àë k ‚àà Finset.range (N_M + 1), f_lim k) + (‚àë' k, f (k + (N_M + 1)) n - ‚àë' k, f_lim (k + (N_M + 1)))‚Äñ := by
      rw [‚ÜêSummable.sum_add_tsum_nat_add (N_M + 1) (f_summable n)]
      rw [‚ÜêSummable.sum_add_tsum_nat_add (N_M + 1) f_lim_summable]
      ring_nf -- No idea why ring fails to close the goal, but ring_nf works
    _ ‚â§ ‚Äñ‚àë k ‚àà Finset.range (N_M + 1), (f k n - f_lim k)‚Äñ + (‚Äñ‚àë' k, f (k + (N_M + 1)) n‚Äñ + ‚Äñ‚àë' k, f_lim (k + (N_M + 1))‚Äñ) := by
      apply le_trans (norm_add_le _ _)
      rw [Finset.sum_sub_distrib]
      apply add_le_add_left (norm_sub_le _ _)
    _ ‚â§ ‚àë k ‚àà Finset.range (N_M + 1), ‚Äñf k n - f_lim k‚Äñ + (‚àë' k, ‚Äñf (k + (N_M + 1)) n‚Äñ + ‚àë' k, ‚Äñf_lim (k + (N_M + 1))‚Äñ) := by
      apply add_le_add
      apply norm_sum_le
      apply add_le_add
      exact norm_tsum_le_tsum_norm <| f_norm_summable n
      exact norm_tsum_le_tsum_norm f_lim_norm_summable
    _ ‚â§ ‚àë k ‚àà Finset.range (N_M + 1), (Œµ/(3*(N_M + 1))) + (‚àë' k, M (k + (N_M + 1)) + ‚àë' k, M (k + N_M + 1)) := by
      apply add_le_add
      apply Finset.sum_le_sum
      intro k hk
      have n_large := by calc
        n ‚â• N_k_max := le_of_max_le_right hn
        _ ‚â• N_k k := by
          apply Finset.le_max'
          rw [Finset.mem_image]
          use k
      exact (fk_bound k).choose_spec n n_large
      apply add_le_add
      apply Summable.tsum_le_tsum (Œª k ‚Ü¶ h_bound (k + (N_M + 1)) n)
      exact f_norm_summable n
      exact h_M_summable
      exact Summable.tsum_le_tsum (Œª k ‚Ü¶ norm_f_lim_le_M (k + (N_M + 1))) f_lim_norm_summable h_M_summable
    _ < Œµ/3 + Œµ/3 + Œµ/3 := by
      rw [add_assoc]
      apply add_lt_add_of_le_of_lt
      rw [Finset.sum_const, Finset.card_range]
      apply le_of_eq
      field_simp
      ring
      exact add_lt_add hN_M hN_M
    _ = Œµ := add_thirds Œµ

theorem le_exp_norm_sub_one {Œ± : Type*} [NormedRing Œ±] [Nontrivial Œ±] [NormMulClass Œ±] (x : Œ±) :
    ‚Äñx‚Äñ ‚â§ Real.exp (‚Äñx - 1‚Äñ) := calc
  ‚Äñx‚Äñ = ‚Äñx - 1 + 1‚Äñ := by
    rw [sub_eq_add_neg, add_assoc, neg_add_cancel, add_zero]
  _ ‚â§ ‚Äñx - 1‚Äñ + 1 := by
    apply le_trans (norm_add_le _ _) _
    rw [IsAbsoluteValue.abv_one' norm]
  _ ‚â§ Real.exp (‚Äñx - 1‚Äñ) := Real.add_one_le_exp _

theorem List.prod_nonneg {Œ± : Type*} [One Œ±] [Preorder Œ±] [MulZeroClass Œ±] [PosMulMono Œ±]
    [ZeroLEOneClass Œ±] {l : List Œ±} (h_nonneg : ‚àÄ a ‚àà l, 0 ‚â§ a) : 0 ‚â§ l.prod := by
  apply List.prod_induction (0 ‚â§ ¬∑)
  exact fun _ _ ha hb ‚Ü¶ mul_nonneg ha hb
  exact zero_le_one
  exact h_nonneg

theorem List.prod_le_prod‚ÇÄ {Œ± Œ≤: Type*} [One Œ≤] [Preorder Œ≤] [MulZeroClass Œ≤] [PosMulMono Œ≤]
    [MulPosMono Œ≤] [ZeroLEOneClass Œ≤] {f g : Œ± ‚Üí Œ≤} {l : List Œ±} (hfg : ‚àÄ i ‚àà l, f i ‚â§ g i) 
    (hf: ‚àÄ i ‚àà l, 0 ‚â§ f i) (hg: ‚àÄ i ‚àà l, 0 ‚â§ g i) : (l.map f).prod ‚â§ (l.map g).prod := by
  induction' l with head tail h_tail 
  simp
  repeat rw [map_cons, prod_cons]
  apply mul_le_mul_of_nonneg
  exact hfg head mem_cons_self
  apply h_tail
  exact fun i hi ‚Ü¶ hfg i (mem_cons_of_mem head hi)
  exact fun i hi ‚Ü¶ hf i (mem_cons_of_mem head hi)
  exact fun i hi ‚Ü¶ hg i (mem_cons_of_mem head hi)
  exact hf head mem_cons_self 
  apply List.prod_nonneg
  intro a ha
  obtain ‚ü®b, ‚ü®hb, heq‚ü©‚ü© := mem_map.mp ha
  rw [‚Üêheq]
  exact hg b (mem_cons_of_mem head hb)

theorem List.le_prod_of_norm_of_sub_one_of_norm_of_sub_one {Œ± : Type*} [NormedRing Œ±] [Nontrivial Œ±]
    [NormMulClass Œ±] {l: List Œ±} : ‚Äñl.prod - 1‚Äñ ‚â§ (l.map (‚Äñ¬∑ - 1‚Äñ + 1)).prod - 1 := by
  induction' l with head tail h_tail
  simp
  rw [List.prod_cons, List.map_cons, List.prod_cons]
  calc
    ‚Äñhead * tail.prod - 1‚Äñ = ‚Äñhead * (tail.prod - 1) + (head - 1)‚Äñ := by
      rw [mul_sub, mul_one, add_sub, sub_eq_add_neg _ head, add_assoc, neg_add_cancel, add_zero]
    _ ‚â§ ‚Äñhead * (tail.prod - 1)‚Äñ + ‚Äñhead - 1‚Äñ := norm_add_le _ _
    _ ‚â§ ‚Äñhead‚Äñ * ‚Äñtail.prod - 1‚Äñ + ‚Äñhead - 1‚Äñ := add_le_add_right (norm_mul_le _ _) _
    _ ‚â§ ‚Äñhead‚Äñ * ((tail.map (‚Äñ¬∑ - 1‚Äñ + 1)).prod - 1) + ‚Äñhead - 1‚Äñ :=
      add_le_add_right (mul_le_mul_of_nonneg_left h_tail (norm_nonneg _)) _
    _ ‚â§ (‚Äñhead - 1‚Äñ + 1) * ((tail.map (‚Äñ¬∑ - 1‚Äñ + 1)).prod - 1) + ‚Äñhead - 1‚Äñ := by
      apply add_le_add_right
      apply mul_le_mul_of_nonneg_right
      rw [‚ÜêIsAbsoluteValue.abv_one' (norm : Œ± ‚Üí ‚Ñù)]
      apply le_trans _ (norm_add_le _ _)
      rw [sub_eq_add_neg, add_assoc, neg_add_cancel, add_zero]
      exact le_trans (norm_nonneg _) h_tail
    _ = (‚Äñhead - 1‚Äñ + 1) * (tail.map (‚Äñ¬∑ - 1‚Äñ + 1)).prod - 1 := by ring

theorem List.norm_prod_sub_one_le_exp_sub_one {Œ± : Type*} [NormedRing Œ±] [Nontrivial Œ±]
    [NormMulClass Œ±] {l : List Œ±} : ‚Äñl.prod - 1‚Äñ ‚â§ Real.exp ((l.map (‚Äñ¬∑ - 1‚Äñ)).sum) - 1 := by
  apply le_trans l.le_prod_of_norm_of_sub_one_of_norm_of_sub_one <| sub_le_sub_right _ _
  apply le_trans (List.prod_le_prod‚ÇÄ (fun x _ ‚Ü¶ Real.add_one_le_exp (‚Äñx - 1‚Äñ)) _ _) _
  exact fun _ _ ‚Ü¶ by positivity
  exact fun _ _ ‚Ü¶ by positivity
  rw [Real.exp_list_sum, map_map]
  rfl

theorem Finset.norm_prod_sub_one_le_exp_sub_one {Œ± Œπ : Type*} [NormedCommRing Œ±]
    [Nontrivial Œ±] [NormMulClass Œ±] {s : Finset Œπ} {f : Œπ ‚Üí Œ±} :
    ‚Äñ‚àè i ‚àà s, f i - 1‚Äñ ‚â§ Real.exp (‚àë i ‚àà s, ‚Äñf i - 1‚Äñ) - 1 := by
  rw [‚ÜêFinset.prod_map_toList, ‚ÜêFinset.sum_map_toList]
  convert List.norm_prod_sub_one_le_exp_sub_one
  simp
  all_goals assumption

theorem List.norm_prod_le_exp_sum_norm_sub_one {Œ± : Type*} [NormedRing Œ±] [Nontrivial Œ±]
    [NormMulClass Œ±] [NormOneClass Œ±] {l : List Œ±} :
    ‚Äñl.prod‚Äñ ‚â§ Real.exp ((l.map (‚Äñ¬∑ - 1‚Äñ)).sum) := by
  rw [List.norm_prod]
  apply le_trans (l.prod_le_prod‚ÇÄ (fun x _ ‚Ü¶ le_exp_norm_sub_one x) _ _) _
  exact fun _ _ ‚Ü¶ norm_nonneg _
  exact fun _ _ ‚Ü¶ Real.exp_nonneg _
  rw [Real.exp_list_sum, map_map]
  rfl

theorem Finset.norm_prod_le_exp_sum_norm_sub_one {Œ± Œπ : Type*} [NormedCommRing Œ±] [Nontrivial Œ±]
    [NormMulClass Œ±] [NormOneClass Œ±] {s : Finset Œπ} {f : Œπ ‚Üí Œ±} :
    ‚Äñ‚àè i ‚àà s, f i‚Äñ ‚â§ Real.exp (‚àë i ‚àà s, ‚Äñf i - 1‚Äñ) := by
  rw [‚ÜêFinset.prod_map_toList, ‚ÜêFinset.sum_map_toList]
  convert List.norm_prod_le_exp_sum_norm_sub_one
  simp
  all_goals assumption

theorem uniformCauchySeqOn_prod {Œ± Œπ R : Type*} [NormedCommRing R] [Nontrivial R] [NormMulClass R]
    [NormOneClass R] [DecidableEq Œπ] {f : Œπ ‚Üí Œ± ‚Üí R} {u : Œπ ‚Üí ‚Ñù} {s : Set Œ±} (hu : Summable u)
    (hfu : ‚àÄ i, ‚àÄ x ‚àà s, ‚Äñf i x - 1‚Äñ ‚â§ u i) :
    UniformCauchySeqOn (fun (t : Finset Œπ) ‚Ü¶ fun (x : Œ±) ‚Ü¶  ‚àè i ‚àà t, f i x) atTop s := by
  by_cases s_nonempty : s.Nonempty
  have u_nonneg : 0 ‚â§ u := fun i ‚Ü¶ le_trans (norm_nonneg _)
    (hfu i s_nonempty.choose s_nonempty.choose_spec)
  refine Metric.uniformCauchySeqOn_iff.mpr fun Œµ Œµpos ‚Ü¶ ?_
  have h_tail := tendsto_tsum_compl_atTop_zero u
  have h_exp_lim : Tendsto (Real.exp ¬∑ - 1) (ùìù 0) (ùìù 0) :=
    (Real.continuous_exp.sub continuous_const).tendsto' 0 0 (by norm_num)
  have h_exp_tail := h_exp_lim.comp h_tail
  replace h_exp_tail := (tendsto_order.mp h_exp_tail).right
    (Œµ / (2 * Real.exp (‚àë' i, u i))) (by positivity)
  simp only [Function.comp_apply, eventually_atTop] at h_exp_tail
  obtain ‚ü®N, hN‚ü© := h_exp_tail
  use N
  intro m hm n hn x hx
  have h_lemma : ‚àÄ n ‚â• N, ‚Äñ‚àè i ‚àà n, f i x - ‚àè i ‚àà N, f i x‚Äñ < Œµ/2 := fun n hn ‚Ü¶ calc
    ‚Äñ‚àè i ‚àà n, f i x - ‚àè i ‚àà N, f i x‚Äñ = ‚Äñ‚àè i ‚àà N, f i x‚Äñ * ‚Äñ‚àè i ‚àà n \ N, f i x - 1‚Äñ := by
      rw [‚ÜêFinset.prod_sdiff hn, mul_comm]
      nth_rewrite 2 [‚Üêmul_one (‚àè i ‚àà N, f i x)]
      rw [‚Üêmul_sub, norm_mul]
    _ ‚â§ Real.exp (‚àë i ‚àà N, ‚Äñf i x - 1‚Äñ) * (Real.exp (‚àë i ‚àà n \ N, ‚Äñf i x - 1‚Äñ) - 1) := by
      apply mul_le_mul_of_nonneg
      exact Finset.norm_prod_le_exp_sum_norm_sub_one
      exact Finset.norm_prod_sub_one_le_exp_sub_one
      exact norm_nonneg _
      rw [le_sub_iff_add_le, zero_add]
      exact Real.one_le_exp <| Finset.sum_nonneg fun i _ ‚Ü¶ norm_nonneg _
    _ ‚â§ Real.exp (‚àë i ‚àà N, u i) * (Real.exp (‚àë i ‚àà n \ N, u i) - 1) := by
      apply mul_le_mul_of_nonneg
      apply Real.exp_monotone <| Finset.sum_le_sum (fun i _ ‚Ü¶ hfu i x hx)
      apply sub_le_sub_right
      apply Real.exp_monotone <| Finset.sum_le_sum (fun i _ ‚Ü¶ hfu i x hx)
      exact Real.exp_nonneg _
      rw [le_sub_iff_add_le, zero_add]
      apply Real.one_le_exp <| Finset.sum_nonneg fun i _ ‚Ü¶ u_nonneg i
    _ ‚â§ Real.exp (‚àë' i, u i) * (Real.exp (‚àë' i : { x // x ‚àâ N }, u i) - 1) := by
      apply mul_le_mul_of_nonneg
      apply Real.exp_monotone
      exact hu.sum_le_tsum N (fun i _ ‚Ü¶ u_nonneg i)
      apply sub_le_sub_right
      apply Real.exp_monotone
      rw [‚ÜêFinset.tsum_subtype]
      let emb (x : { x // x ‚àà n \ N }) : { x // x ‚àâ N } := {
        val := x.val
        property := (Finset.mem_sdiff.mp x.property).right
      }
      have emb_injective : Function.Injective emb := fun _ _ heq ‚Ü¶ by
        apply_fun Subtype.val at heq
        exact Subtype.mk_eq_mk.mpr heq
      apply Summable.tsum_le_tsum_of_inj emb emb_injective 
      exact fun i _ ‚Ü¶ u_nonneg i
      exact fun _ ‚Ü¶ by rfl
      apply Summable.subtype hu
      apply Summable.subtype hu
      exact Real.exp_nonneg _
      rw [le_sub_iff_add_le, zero_add]
      apply Real.one_le_exp
      apply tsum_nonneg fun (i : { x // x ‚àâ N }) ‚Ü¶ u_nonneg i.val 
    _ < Real.exp (‚àë' i, u i) * (Œµ / (2 * Real.exp (‚àë' i, u i))) := by
      exact (mul_lt_mul_left (Real.exp_pos _)).mpr (hN N (by rfl))
    _ = Œµ/2 := by field_simp; ring
  calc
    dist (‚àè i ‚àà m, f i x) (‚àè i ‚àà n, f i x) =
    ‚Äñ‚àè i ‚àà m, f i x - ‚àè i ‚àà N, f i x - (‚àè i ‚àà n, f i x - ‚àè i ‚àà N, f i x)‚Äñ := by
      rw [dist_eq_norm]
      ring_nf
    _ ‚â§ ‚Äñ‚àè i ‚àà m, f i x - ‚àè i ‚àà N, f i x‚Äñ + ‚Äñ‚àè i ‚àà n, f i x - ‚àè i ‚àà N, f i x‚Äñ := norm_sub_le _ _
    _ < Œµ/2 + Œµ/2 := add_lt_add (h_lemma m hm) (h_lemma n hn)
    _ = Œµ := add_halves Œµ
  unfold UniformCauchySeqOn
  simp [Set.not_nonempty_iff_eq_empty.mp s_nonempty]

theorem TendstoUniformlyOn.absolutely_of_prod_of_norm_bounded {Œ± Œπ R : Type*} [NormedCommRing R]
    [Nontrivial R] [NormMulClass R] [NormOneClass R] [DecidableEq Œπ] {f : Œπ ‚Üí Œ± ‚Üí R} {u : Œπ ‚Üí ‚Ñù}
    {s : Set Œ±} (hu : Summable u) (hfu : ‚àÄ i, ‚àÄ x ‚àà s, ‚Äñf i x - 1‚Äñ ‚â§ u i)
    (hf : ‚àÄ x ‚àà s, Multipliable (f ¬∑ x)) :
    TendstoUniformlyOn (fun (t : Finset Œπ) ‚Ü¶ fun (x : Œ±) ‚Ü¶  ‚àè i ‚àà t, f i x)
    (fun x ‚Ü¶ ‚àè' n, f n x) atTop s := by
  exact (uniformCauchySeqOn_prod hu hfu).tendstoUniformlyOn_of_tendsto fun x hx ‚Ü¶ (hf x hx).hasProd

theorem Multipliable.of_norm_bounded_of_complete {Œ± Œπ R : Type*} 
    [NormedCommRing R] [Nontrivial R] [NormMulClass R] [NormOneClass R] [CompleteSpace R
    ][DecidableEq Œπ] {f : Œπ ‚Üí Œ± ‚Üí R} {u : Œπ ‚Üí ‚Ñù} {s : Set Œ±} (hu : Summable u)
    (hfu : ‚àÄ i, ‚àÄ x ‚àà s, ‚Äñf i x - 1‚Äñ ‚â§ u i) :
    ‚àÄ x ‚àà s, Multipliable (f ¬∑ x) := by
  intro x hx
  apply cauchySeq_tendsto_of_complete
  apply UniformCauchySeqOn.cauchySeq _ hx
  apply uniformCauchySeqOn_prod hu hfu

theorem TendstoUniformlyOn.absolutely_of_prod_of_norm_bounded_of_complete {Œ± Œπ R : Type*} 
    [NormedCommRing R] [Nontrivial R] [NormMulClass R] [NormOneClass R] [CompleteSpace R
    ][DecidableEq Œπ] {f : Œπ ‚Üí Œ± ‚Üí R} {u : Œπ ‚Üí ‚Ñù} {s : Set Œ±} (hu : Summable u)
    (hfu : ‚àÄ i, ‚àÄ x ‚àà s, ‚Äñf i x - 1‚Äñ ‚â§ u i) :
    TendstoUniformlyOn (fun (t : Finset Œπ) ‚Ü¶ fun (x : Œ±) ‚Ü¶  ‚àè i ‚àà t, f i x)
    (fun x ‚Ü¶ ‚àè' n, f n x) atTop s := by
  have hf := Multipliable.of_norm_bounded_of_complete hu hfu
  exact (uniformCauchySeqOn_prod hu hfu).tendstoUniformlyOn_of_tendsto fun x hx ‚Ü¶ (hf x hx).hasProd

theorem TendstoUniformlyOn.of_prod_of_norm_bounded {Œ± R : Type*} [NormedCommRing R] [Nontrivial R]
    [NormMulClass R] [NormOneClass R] {f : ‚Ñï ‚Üí Œ± ‚Üí R} {u : ‚Ñï ‚Üí ‚Ñù} {s : Set Œ±} (hu : Summable u)
    (hfu : ‚àÄ i, ‚àÄ x ‚àà s, ‚Äñf i x - 1‚Äñ ‚â§ u i) (hf : ‚àÄ x ‚àà s, Multipliable (f ¬∑ x)) :
    TendstoUniformlyOn (fun n ‚Ü¶ fun x ‚Ü¶ ‚àè i ‚àà Finset.range n, f i x) (‚àè' n, f n ¬∑) atTop s := by
  have h_abs_uniformly := TendstoUniformlyOn.absolutely_of_prod_of_norm_bounded hu hfu hf
  exact tendstoUniformlyOn_iff_seq_tendstoUniformlyOn.mp h_abs_uniformly Finset.range
    tendsto_finset_range

theorem TendstoUniformlyOn.of_prod_of_norm_bounded_of_complete {Œ± R : Type*} [NormedCommRing R]
    [Nontrivial R] [NormMulClass R] [NormOneClass R] [CompleteSpace R] {f : ‚Ñï ‚Üí Œ± ‚Üí R} {u : ‚Ñï ‚Üí ‚Ñù}
    {s : Set Œ±} (hu : Summable u) (hfu : ‚àÄ i, ‚àÄ x ‚àà s, ‚Äñf i x - 1‚Äñ ‚â§ u i) :
    TendstoUniformlyOn (fun n ‚Ü¶ fun x ‚Ü¶ ‚àè i ‚àà Finset.range n, f i x) (‚àè' n, f n ¬∑) atTop s := by
  have hf := Multipliable.of_norm_bounded_of_complete hu hfu
  exact TendstoUniformlyOn.of_prod_of_norm_bounded hu hfu hf

