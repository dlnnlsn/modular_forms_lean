import Mathlib.Analysis.Asymptotics.Defs
import Mathlib.Analysis.Calculus.Deriv.MeanValue
import Mathlib.Analysis.RCLike.Basic
import Mathlib.Analysis.Normed.Group.InfiniteSum
import Mathlib.Analysis.NormedSpace.FunctionSeries
import Mathlib.Analysis.SpecialFunctions.Exp
import Mathlib.Data.Complex.Exponential
import Mathlib.Topology.Algebra.InfiniteSum.UniformOn
import Mathlib.Topology.Instances.ENNReal.Lemmas
import Mathlib.Topology.MetricSpace.Pseudo.Defs

open Filter Topology Metric

--TODO: Convert this to the multiplicative version and use @[to_additive]
theorem sum_tail_tends_to_zero_of_summable {Œ±: Type*} [AddCommGroup Œ±] [TopologicalSpace Œ±] [IsTopologicalAddGroup Œ±] [T2Space Œ±] {f: ‚Ñï ‚Üí Œ±} (h: Summable f):
    Tendsto (Œª N: ‚Ñï ‚Ü¶ ‚àë' i: ‚Ñï, f (i + N)) atTop (ùìù 0) := by
  simp_rw [Œª N ‚Ü¶ eq_sub_of_add_eq' <| Summable.sum_add_tsum_nat_add N h]
  rw [‚Üêsub_self <| tsum f]
  apply Filter.Tendsto.const_sub
  exact Summable.tendsto_sum_tsum_nat h

theorem interchange_limit_sum_of_dominated_convergence {Œ±: Type*} [RCLike Œ±] {f: ‚Ñï ‚Üí ‚Ñï ‚Üí Œ±} {M: ‚Ñï ‚Üí ‚Ñù} {f_lim: ‚Ñï ‚Üí Œ±}
  (h_lim: ‚àÄ k, Tendsto (f k ¬∑) atTop (ùìù (f_lim k)))
  (h_bound: ‚àÄ k, ‚àÄ n, ‚Äñf k n‚Äñ ‚â§ M k)
  (h_M_summable: Summable M)
  : Tendsto (‚àë' k, f k ¬∑) atTop (ùìù <| ‚àë' k, f_lim k)
:= by
  -- have M_k_nonneg: 0 ‚â§ M := Œª k ‚Ü¶ le_trans (norm_nonneg <| f k 0) (h_bound k 0)
  have f_summable (n: ‚Ñï): Summable (f ¬∑ n) := Summable.of_norm_bounded M h_M_summable (Œª k ‚Ü¶ h_bound k n)
  have norm_f_lim_le_M: norm ‚àò f_lim ‚â§ M := by
    intro k
    have: Tendsto (Œª _: ‚Ñï ‚Ü¶ M k) atTop (ùìù <| M k) := by exact tendsto_const_nhds
    exact le_of_tendsto_of_tendsto' (Tendsto.norm <| h_lim k) this (h_bound k)
  have f_lim_summable: Summable f_lim := Summable.of_norm_bounded M h_M_summable norm_f_lim_le_M
  have f_lim_norm_summable: Summable (norm ‚àò f_lim) := Summable.of_nonneg_of_le (Œª _ ‚Ü¶ norm_nonneg _) norm_f_lim_le_M h_M_summable
  simp_rw [atTop_basis.tendsto_iff nhds_basis_ball, Set.mem_Ici, mem_ball, true_and]
  intro Œµ Œµ_pos
  have sum_M_tail_tendsto_zero := sum_tail_tends_to_zero_of_summable h_M_summable
  rw [atTop_basis.tendsto_iff <| nhds_basis_Ioo_pos 0] at sum_M_tail_tendsto_zero
  obtain ‚ü®N_M, hN_M‚ü© := sum_M_tail_tendsto_zero (Œµ/3) (by positivity)
  simp only [true_and, Set.mem_Ici, zero_sub, zero_add, Set.mem_Ioo] at hN_M
  replace hN_M := And.right <| hN_M (N_M + 1) (Nat.le_succ _)
  have f_norm_summable (n: ‚Ñï): Summable (Œª k ‚Ü¶ ‚Äñf k n‚Äñ) := Summable.of_nonneg_of_le (Œª _ ‚Ü¶ norm_nonneg _) (Œª k ‚Ü¶ h_bound k n) h_M_summable
  replace f_norm_summable := Œª n ‚Ü¶ (summable_nat_add_iff (N_M + 1)).mpr <| f_norm_summable n
  replace h_M_summable := (summable_nat_add_iff (N_M + 1)).mpr h_M_summable
  replace f_lim_norm_summable := (summable_nat_add_iff (N_M + 1)).mpr f_lim_norm_summable
  have fk_bound (k: ‚Ñï): ‚àÉ Nk, ‚àÄ n ‚â• Nk, ‚Äñf k n - f_lim k‚Äñ ‚â§ Œµ/(3*(N_M + 1)) := by
    have f_k_limit: Tendsto (Œª n ‚Ü¶ ‚Äñf k n - f_lim k‚Äñ) atTop (ùìù 0) := by
      rw [show 0 = ‚Äñ(0: Œ±)‚Äñ from Eq.symm norm_zero]
      apply Tendsto.norm
      rw [‚Üêsub_self (f_lim k)]
      exact Tendsto.sub (h_lim k) tendsto_const_nhds
    rw [atTop_basis.tendsto_iff <| nhds_basis_Ioo_pos 0] at f_k_limit
    obtain ‚ü®Nk, hNk‚ü© := f_k_limit (Œµ/(3*(N_M + 1))) (by positivity)
    simp only [Set.mem_Ici, zero_sub, zero_add, Set.mem_Ioo, true_and] at hNk
    use Nk
    intro n hn
    exact le_of_lt (hNk n hn).right
  let N_k: ‚Ñï ‚Üí ‚Ñï := Œª k ‚Ü¶ (fk_bound k).choose
  let N_k_max := Finset.max' (Finset.image N_k <| Finset.range (N_M + 1)) (Finset.image_nonempty.mpr Finset.nonempty_range_succ)
  let N := max N_M N_k_max
  use N
  intro n hn
  rw [NormedAddGroup.dist_eq]
  calc
    ‚Äñ‚àë' k, f k n - ‚àë' k, f_lim k‚Äñ = ‚Äñ(‚àë k ‚àà Finset.range (N_M + 1), f k n - ‚àë k ‚àà Finset.range (N_M + 1), f_lim k) + (‚àë' k, f (k + (N_M + 1)) n - ‚àë' k, f_lim (k + (N_M + 1)))‚Äñ := by
      rw [‚ÜêSummable.sum_add_tsum_nat_add (N_M + 1) (f_summable n)]
      rw [‚ÜêSummable.sum_add_tsum_nat_add (N_M + 1) f_lim_summable]
      ring_nf -- No idea why ring fails to close the goal, but ring_nf works
    _ ‚â§ ‚Äñ‚àë k ‚àà Finset.range (N_M + 1), (f k n - f_lim k)‚Äñ + (‚Äñ‚àë' k, f (k + (N_M + 1)) n‚Äñ + ‚Äñ‚àë' k, f_lim (k + (N_M + 1))‚Äñ) := by
      apply le_trans (norm_add_le _ _)
      rw [Finset.sum_sub_distrib]
      apply add_le_add_left (norm_sub_le _ _)
    _ ‚â§ ‚àë k ‚àà Finset.range (N_M + 1), ‚Äñf k n - f_lim k‚Äñ + (‚àë' k, ‚Äñf (k + (N_M + 1)) n‚Äñ + ‚àë' k, ‚Äñf_lim (k + (N_M + 1))‚Äñ) := by
      apply add_le_add
      apply norm_sum_le
      apply add_le_add
      exact norm_tsum_le_tsum_norm <| f_norm_summable n
      exact norm_tsum_le_tsum_norm f_lim_norm_summable
    _ ‚â§ ‚àë k ‚àà Finset.range (N_M + 1), (Œµ/(3*(N_M + 1))) + (‚àë' k, M (k + (N_M + 1)) + ‚àë' k, M (k + N_M + 1)) := by
      apply add_le_add
      apply Finset.sum_le_sum
      intro k hk
      have n_large := by calc
        n ‚â• N_k_max := le_of_max_le_right hn
        _ ‚â• N_k k := by
          apply Finset.le_max'
          rw [Finset.mem_image]
          use k
      exact (fk_bound k).choose_spec n n_large
      apply add_le_add
      apply Summable.tsum_le_tsum (Œª k ‚Ü¶ h_bound (k + (N_M + 1)) n)
      exact f_norm_summable n
      exact h_M_summable
      exact Summable.tsum_le_tsum (Œª k ‚Ü¶ norm_f_lim_le_M (k + (N_M + 1))) f_lim_norm_summable h_M_summable
    _ < Œµ/3 + Œµ/3 + Œµ/3 := by
      rw [add_assoc]
      apply add_lt_add_of_le_of_lt
      rw [Finset.sum_const, Finset.card_range]
      apply le_of_eq
      field_simp
      ring
      exact add_lt_add hN_M hN_M
    _ = Œµ := add_thirds Œµ

theorem le_exp_norm_sub_one {Œ± : Type*} [NormedRing Œ±] [Nontrivial Œ±] [NormMulClass Œ±] (x : Œ±) :
    ‚Äñx‚Äñ ‚â§ Real.exp (‚Äñx - 1‚Äñ) := calc
  ‚Äñx‚Äñ = ‚Äñx - 1 + 1‚Äñ := by
    rw [sub_eq_add_neg, add_assoc, neg_add_cancel, add_zero]
  _ ‚â§ ‚Äñx - 1‚Äñ + 1 := by
    apply le_trans (norm_add_le _ _) _
    rw [IsAbsoluteValue.abv_one' norm]
  _ ‚â§ Real.exp (‚Äñx - 1‚Äñ) := Real.add_one_le_exp _

theorem List.prod_nonneg {Œ± : Type*} [One Œ±] [Preorder Œ±] [MulZeroClass Œ±] [PosMulMono Œ±]
    [ZeroLEOneClass Œ±] {l : List Œ±} (h_nonneg : ‚àÄ a ‚àà l, 0 ‚â§ a) : 0 ‚â§ l.prod := by
  apply List.prod_induction (0 ‚â§ ¬∑)
  exact fun _ _ ha hb ‚Ü¶ mul_nonneg ha hb
  exact zero_le_one
  exact h_nonneg

theorem List.prod_le_prod‚ÇÄ {Œ± Œ≤: Type*} [One Œ≤] [Preorder Œ≤] [MulZeroClass Œ≤] [PosMulMono Œ≤]
    [MulPosMono Œ≤] [ZeroLEOneClass Œ≤] {f g : Œ± ‚Üí Œ≤} {l : List Œ±} (hfg : ‚àÄ i ‚àà l, f i ‚â§ g i) 
    (hf: ‚àÄ i ‚àà l, 0 ‚â§ f i) (hg: ‚àÄ i ‚àà l, 0 ‚â§ g i) : (l.map f).prod ‚â§ (l.map g).prod := by
  induction' l with head tail h_tail 
  simp
  repeat rw [map_cons, prod_cons]
  apply mul_le_mul_of_nonneg
  exact hfg head mem_cons_self
  apply h_tail
  exact fun i hi ‚Ü¶ hfg i (mem_cons_of_mem head hi)
  exact fun i hi ‚Ü¶ hf i (mem_cons_of_mem head hi)
  exact fun i hi ‚Ü¶ hg i (mem_cons_of_mem head hi)
  exact hf head mem_cons_self 
  apply List.prod_nonneg
  intro a ha
  obtain ‚ü®b, ‚ü®hb, heq‚ü©‚ü© := mem_map.mp ha
  rw [‚Üêheq]
  exact hg b (mem_cons_of_mem head hb)

theorem List.le_prod_of_norm_of_sub_one_of_norm_of_sub_one {Œ± : Type*} [NormedRing Œ±] [Nontrivial Œ±]
    [NormMulClass Œ±] {l: List Œ±} : ‚Äñl.prod - 1‚Äñ ‚â§ (l.map (‚Äñ¬∑ - 1‚Äñ + 1)).prod - 1 := by
  induction' l with head tail h_tail
  simp
  rw [List.prod_cons, List.map_cons, List.prod_cons]
  calc
    ‚Äñhead * tail.prod - 1‚Äñ = ‚Äñhead * (tail.prod - 1) + (head - 1)‚Äñ := by
      rw [mul_sub, mul_one, add_sub, sub_eq_add_neg _ head, add_assoc, neg_add_cancel, add_zero]
    _ ‚â§ ‚Äñhead * (tail.prod - 1)‚Äñ + ‚Äñhead - 1‚Äñ := norm_add_le _ _
    _ ‚â§ ‚Äñhead‚Äñ * ‚Äñtail.prod - 1‚Äñ + ‚Äñhead - 1‚Äñ := add_le_add_right (norm_mul_le _ _) _
    _ ‚â§ ‚Äñhead‚Äñ * ((tail.map (‚Äñ¬∑ - 1‚Äñ + 1)).prod - 1) + ‚Äñhead - 1‚Äñ :=
      add_le_add_right (mul_le_mul_of_nonneg_left h_tail (norm_nonneg _)) _
    _ ‚â§ (‚Äñhead - 1‚Äñ + 1) * ((tail.map (‚Äñ¬∑ - 1‚Äñ + 1)).prod - 1) + ‚Äñhead - 1‚Äñ := by
      apply add_le_add_right
      apply mul_le_mul_of_nonneg_right
      rw [‚ÜêIsAbsoluteValue.abv_one' (norm : Œ± ‚Üí ‚Ñù)]
      apply le_trans _ (norm_add_le _ _)
      rw [sub_eq_add_neg, add_assoc, neg_add_cancel, add_zero]
      exact le_trans (norm_nonneg _) h_tail
    _ = (‚Äñhead - 1‚Äñ + 1) * (tail.map (‚Äñ¬∑ - 1‚Äñ + 1)).prod - 1 := by ring

theorem List.norm_prod_sub_one_le_exp_sub_one {Œ± : Type*} [NormedRing Œ±] [Nontrivial Œ±]
    [NormMulClass Œ±] {l : List Œ±} : ‚Äñl.prod - 1‚Äñ ‚â§ Real.exp ((l.map (‚Äñ¬∑ - 1‚Äñ)).sum) - 1 := by
  apply le_trans l.le_prod_of_norm_of_sub_one_of_norm_of_sub_one <| sub_le_sub_right _ _
  apply le_trans (List.prod_le_prod‚ÇÄ (fun x _ ‚Ü¶ Real.add_one_le_exp (‚Äñx - 1‚Äñ)) _ _) _
  exact fun _ _ ‚Ü¶ by positivity
  exact fun _ _ ‚Ü¶ by positivity
  rw [Real.exp_list_sum, map_map]
  rfl

theorem Finset.norm_prod_sub_one_le_exp_sub_one {Œ± Œπ : Type*} [NormedCommRing Œ±]
    [Nontrivial Œ±] [NormMulClass Œ±] {s : Finset Œπ} {f : Œπ ‚Üí Œ±} :
    ‚Äñ‚àè i ‚àà s, f i - 1‚Äñ ‚â§ Real.exp (‚àë i ‚àà s, ‚Äñf i - 1‚Äñ) - 1 := by
  rw [‚ÜêFinset.prod_map_toList, ‚ÜêFinset.sum_map_toList]
  convert List.norm_prod_sub_one_le_exp_sub_one
  simp
  all_goals assumption

theorem List.norm_prod_le_exp_sum_norm_sub_one {Œ± : Type*} [NormedRing Œ±] [Nontrivial Œ±]
    [NormMulClass Œ±] [NormOneClass Œ±] {l : List Œ±} :
    ‚Äñl.prod‚Äñ ‚â§ Real.exp ((l.map (‚Äñ¬∑ - 1‚Äñ)).sum) := by
  rw [List.norm_prod]
  apply le_trans (l.prod_le_prod‚ÇÄ (fun x _ ‚Ü¶ le_exp_norm_sub_one x) _ _) _
  exact fun _ _ ‚Ü¶ norm_nonneg _
  exact fun _ _ ‚Ü¶ Real.exp_nonneg _
  rw [Real.exp_list_sum, map_map]
  rfl

theorem Finset.norm_prod_le_exp_sum_norm_sub_one {Œ± Œπ : Type*} [NormedCommRing Œ±] [Nontrivial Œ±]
    [NormMulClass Œ±] [NormOneClass Œ±] {s : Finset Œπ} {f : Œπ ‚Üí Œ±} :
    ‚Äñ‚àè i ‚àà s, f i‚Äñ ‚â§ Real.exp (‚àë i ‚àà s, ‚Äñf i - 1‚Äñ) := by
  rw [‚ÜêFinset.prod_map_toList, ‚ÜêFinset.sum_map_toList]
  convert List.norm_prod_le_exp_sum_norm_sub_one
  simp
  all_goals assumption

-- Based on proof from
-- [course notes for Analytic Number Theory](https://pub.math.leidenuniv.nl/~evertsejh/ant20-0.pdf)
theorem uniformCauchySeqOn_prod {Œ± Œπ R : Type*} [NormedCommRing R] [Nontrivial R] [NormMulClass R]
    [NormOneClass R] [DecidableEq Œπ] {f : Œπ ‚Üí Œ± ‚Üí R} {u : Œπ ‚Üí ‚Ñù} {s : Set Œ±} (hu : Summable u)
    (hfu : ‚àÄ i, ‚àÄ x ‚àà s, ‚Äñf i x - 1‚Äñ ‚â§ u i) :
    UniformCauchySeqOn (fun (t : Finset Œπ) ‚Ü¶ fun (x : Œ±) ‚Ü¶  ‚àè i ‚àà t, f i x) atTop s := by
  by_cases s_nonempty : s.Nonempty
  have u_nonneg : 0 ‚â§ u := fun i ‚Ü¶ le_trans (norm_nonneg _)
    (hfu i s_nonempty.choose s_nonempty.choose_spec)
  refine Metric.uniformCauchySeqOn_iff.mpr fun Œµ Œµpos ‚Ü¶ ?_
  have h_tail := tendsto_tsum_compl_atTop_zero u
  have h_exp_lim : Tendsto (Real.exp ¬∑ - 1) (ùìù 0) (ùìù 0) :=
    (Real.continuous_exp.sub continuous_const).tendsto' 0 0 (by norm_num)
  have h_exp_tail := h_exp_lim.comp h_tail
  replace h_exp_tail := (tendsto_order.mp h_exp_tail).right
    (Œµ / (2 * Real.exp (‚àë' i, u i))) (by positivity)
  simp only [Function.comp_apply, eventually_atTop] at h_exp_tail
  obtain ‚ü®N, hN‚ü© := h_exp_tail
  use N
  intro m hm n hn x hx
  have h_lemma : ‚àÄ n ‚â• N, ‚Äñ‚àè i ‚àà n, f i x - ‚àè i ‚àà N, f i x‚Äñ < Œµ/2 := fun n hn ‚Ü¶ calc
    ‚Äñ‚àè i ‚àà n, f i x - ‚àè i ‚àà N, f i x‚Äñ = ‚Äñ‚àè i ‚àà N, f i x‚Äñ * ‚Äñ‚àè i ‚àà n \ N, f i x - 1‚Äñ := by
      rw [‚ÜêFinset.prod_sdiff hn, mul_comm]
      nth_rewrite 2 [‚Üêmul_one (‚àè i ‚àà N, f i x)]
      rw [‚Üêmul_sub, norm_mul]
    _ ‚â§ Real.exp (‚àë i ‚àà N, ‚Äñf i x - 1‚Äñ) * (Real.exp (‚àë i ‚àà n \ N, ‚Äñf i x - 1‚Äñ) - 1) := by
      apply mul_le_mul_of_nonneg
      exact Finset.norm_prod_le_exp_sum_norm_sub_one
      exact Finset.norm_prod_sub_one_le_exp_sub_one
      exact norm_nonneg _
      rw [le_sub_iff_add_le, zero_add]
      exact Real.one_le_exp <| Finset.sum_nonneg fun i _ ‚Ü¶ norm_nonneg _
    _ ‚â§ Real.exp (‚àë i ‚àà N, u i) * (Real.exp (‚àë i ‚àà n \ N, u i) - 1) := by
      apply mul_le_mul_of_nonneg
      apply Real.exp_monotone <| Finset.sum_le_sum (fun i _ ‚Ü¶ hfu i x hx)
      apply sub_le_sub_right
      apply Real.exp_monotone <| Finset.sum_le_sum (fun i _ ‚Ü¶ hfu i x hx)
      exact Real.exp_nonneg _
      rw [le_sub_iff_add_le, zero_add]
      apply Real.one_le_exp <| Finset.sum_nonneg fun i _ ‚Ü¶ u_nonneg i
    _ ‚â§ Real.exp (‚àë' i, u i) * (Real.exp (‚àë' i : { x // x ‚àâ N }, u i) - 1) := by
      apply mul_le_mul_of_nonneg
      apply Real.exp_monotone
      exact hu.sum_le_tsum N (fun i _ ‚Ü¶ u_nonneg i)
      apply sub_le_sub_right
      apply Real.exp_monotone
      rw [‚ÜêFinset.tsum_subtype]
      let emb (x : { x // x ‚àà n \ N }) : { x // x ‚àâ N } := {
        val := x.val
        property := (Finset.mem_sdiff.mp x.property).right
      }
      have emb_injective : Function.Injective emb := fun _ _ heq ‚Ü¶ by
        apply_fun Subtype.val at heq
        exact Subtype.mk_eq_mk.mpr heq
      apply Summable.tsum_le_tsum_of_inj emb emb_injective 
      exact fun i _ ‚Ü¶ u_nonneg i
      exact fun _ ‚Ü¶ by rfl
      apply Summable.subtype hu
      apply Summable.subtype hu
      exact Real.exp_nonneg _
      rw [le_sub_iff_add_le, zero_add]
      apply Real.one_le_exp
      apply tsum_nonneg fun (i : { x // x ‚àâ N }) ‚Ü¶ u_nonneg i.val 
    _ < Real.exp (‚àë' i, u i) * (Œµ / (2 * Real.exp (‚àë' i, u i))) := by
      exact (mul_lt_mul_left (Real.exp_pos _)).mpr (hN N (by rfl))
    _ = Œµ/2 := by field_simp; ring
  calc
    dist (‚àè i ‚àà m, f i x) (‚àè i ‚àà n, f i x) =
    ‚Äñ‚àè i ‚àà m, f i x - ‚àè i ‚àà N, f i x - (‚àè i ‚àà n, f i x - ‚àè i ‚àà N, f i x)‚Äñ := by
      rw [dist_eq_norm]
      ring_nf
    _ ‚â§ ‚Äñ‚àè i ‚àà m, f i x - ‚àè i ‚àà N, f i x‚Äñ + ‚Äñ‚àè i ‚àà n, f i x - ‚àè i ‚àà N, f i x‚Äñ := norm_sub_le _ _
    _ < Œµ/2 + Œµ/2 := add_lt_add (h_lemma m hm) (h_lemma n hn)
    _ = Œµ := add_halves Œµ
  unfold UniformCauchySeqOn
  simp [Set.not_nonempty_iff_eq_empty.mp s_nonempty]

theorem TendstoUniformlyOn.absolutely_of_prod_of_norm_bounded {Œ± Œπ R : Type*} [NormedCommRing R]
    [Nontrivial R] [NormMulClass R] [NormOneClass R] [DecidableEq Œπ] {f : Œπ ‚Üí Œ± ‚Üí R} {u : Œπ ‚Üí ‚Ñù}
    {s : Set Œ±} (hu : Summable u) (hfu : ‚àÄ i, ‚àÄ x ‚àà s, ‚Äñf i x - 1‚Äñ ‚â§ u i)
    (hf : ‚àÄ x ‚àà s, Multipliable (f ¬∑ x)) :
    TendstoUniformlyOn (fun (t : Finset Œπ) ‚Ü¶ fun (x : Œ±) ‚Ü¶  ‚àè i ‚àà t, f i x)
    (fun x ‚Ü¶ ‚àè' n, f n x) atTop s := by
  exact (uniformCauchySeqOn_prod hu hfu).tendstoUniformlyOn_of_tendsto fun x hx ‚Ü¶ (hf x hx).hasProd

theorem Multipliable.of_norm_bounded_of_complete {Œ± Œπ R : Type*} 
    [NormedCommRing R] [Nontrivial R] [NormMulClass R] [NormOneClass R] [CompleteSpace R
    ][DecidableEq Œπ] {f : Œπ ‚Üí Œ± ‚Üí R} {u : Œπ ‚Üí ‚Ñù} {s : Set Œ±} (hu : Summable u)
    (hfu : ‚àÄ i, ‚àÄ x ‚àà s, ‚Äñf i x - 1‚Äñ ‚â§ u i) :
    ‚àÄ x ‚àà s, Multipliable (f ¬∑ x) := by
  intro x hx
  apply cauchySeq_tendsto_of_complete
  apply UniformCauchySeqOn.cauchySeq _ hx
  apply uniformCauchySeqOn_prod hu hfu

theorem TendstoUniformlyOn.absolutely_of_prod_of_norm_bounded_of_complete {Œ± Œπ R : Type*} 
    [NormedCommRing R] [Nontrivial R] [NormMulClass R] [NormOneClass R] [CompleteSpace R
    ][DecidableEq Œπ] {f : Œπ ‚Üí Œ± ‚Üí R} {u : Œπ ‚Üí ‚Ñù} {s : Set Œ±} (hu : Summable u)
    (hfu : ‚àÄ i, ‚àÄ x ‚àà s, ‚Äñf i x - 1‚Äñ ‚â§ u i) :
    TendstoUniformlyOn (fun (t : Finset Œπ) ‚Ü¶ fun (x : Œ±) ‚Ü¶  ‚àè i ‚àà t, f i x)
    (fun x ‚Ü¶ ‚àè' n, f n x) atTop s := by
  have hf := Multipliable.of_norm_bounded_of_complete hu hfu
  exact (uniformCauchySeqOn_prod hu hfu).tendstoUniformlyOn_of_tendsto fun x hx ‚Ü¶ (hf x hx).hasProd

theorem TendstoUniformlyOn.of_prod_of_norm_bounded {Œ± R : Type*} [NormedCommRing R] [Nontrivial R]
    [NormMulClass R] [NormOneClass R] {f : ‚Ñï ‚Üí Œ± ‚Üí R} {u : ‚Ñï ‚Üí ‚Ñù} {s : Set Œ±} (hu : Summable u)
    (hfu : ‚àÄ i, ‚àÄ x ‚àà s, ‚Äñf i x - 1‚Äñ ‚â§ u i) (hf : ‚àÄ x ‚àà s, Multipliable (f ¬∑ x)) :
    TendstoUniformlyOn (fun n ‚Ü¶ fun x ‚Ü¶ ‚àè i ‚àà Finset.range n, f i x) (‚àè' n, f n ¬∑) atTop s := by
  have h_abs_uniformly := TendstoUniformlyOn.absolutely_of_prod_of_norm_bounded hu hfu hf
  exact tendstoUniformlyOn_iff_seq_tendstoUniformlyOn.mp h_abs_uniformly Finset.range
    tendsto_finset_range

theorem TendstoUniformlyOn.of_prod_of_norm_bounded_of_complete {Œ± R : Type*} [NormedCommRing R]
    [Nontrivial R] [NormMulClass R] [NormOneClass R] [CompleteSpace R] {f : ‚Ñï ‚Üí Œ± ‚Üí R} {u : ‚Ñï ‚Üí ‚Ñù}
    {s : Set Œ±} (hu : Summable u) (hfu : ‚àÄ i, ‚àÄ x ‚àà s, ‚Äñf i x - 1‚Äñ ‚â§ u i) :
    TendstoUniformlyOn (fun n ‚Ü¶ fun x ‚Ü¶ ‚àè i ‚àà Finset.range n, f i x) (‚àè' n, f n ¬∑) atTop s := by
  have hf := Multipliable.of_norm_bounded_of_complete hu hfu
  exact TendstoUniformlyOn.of_prod_of_norm_bounded hu hfu hf

theorem TendstoUniformlyOn.mul‚ÇÄ_of_bounded {Œ± Œπ R : Type*} [NormedRing R] {F G : Œπ ‚Üí Œ± ‚Üí R}
    {f g : Œ± ‚Üí R} {l : Filter Œπ} {s : Set Œ±} 
    (hf: TendstoUniformlyOn F f l s) (hg: TendstoUniformlyOn G g l s)
    (hf_bounded : ‚àÉ C, ‚àÄ x ‚àà s, ‚Äñf x‚Äñ ‚â§ C) (hg_bounded : ‚àÉ C, ‚àÄ x ‚àà s, ‚Äñg x‚Äñ ‚â§ C) :
    TendstoUniformlyOn (fun i x ‚Ü¶ (F i x) * (G i x)) (f * g) l s := by
  by_cases s_nonempty : s.Nonempty
  obtain ‚ü®f_bound, hf_bound‚ü© := hf_bounded
  obtain ‚ü®g_bound, hg_bound‚ü© := hg_bounded
  have f_bound_nonneg : 0 ‚â§ f_bound := le_trans (norm_nonneg _) <|
    hf_bound s_nonempty.choose s_nonempty.choose_spec
  have g_bound_nonneg : 0 ‚â§ g_bound := le_trans (norm_nonneg _) <|
    hg_bound s_nonempty.choose s_nonempty.choose_spec
  rw [Metric.tendstoUniformlyOn_iff] at hf hg ‚ä¢
  intro Œµ Œµpos
  let Œµg := Œµ/(2 * (f_bound + 1)) 
  let Œµf := Œµ/(2 * (Œµg + g_bound))
  filter_upwards [hf Œµf (by positivity), hg Œµg (by positivity)] with n hf hg x hx 
  simp_rw [dist_eq_norm] at hf hg ‚ä¢
  calc
    ‚Äñ(f * g) x - F n x * G n x‚Äñ = ‚Äñf x * (g x - G n x) + (f x - F n x) * G n x‚Äñ := by
      rw [mul_sub, sub_eq_add_neg _ (f x * _), add_assoc, sub_mul, sub_eq_add_neg (_ * G n x) _,
          ‚Üêadd_assoc (-_), neg_add_cancel, zero_add, ‚Üêsub_eq_add_neg]
      rfl
    _ ‚â§ ‚Äñf x‚Äñ * ‚Äñg x - G n x‚Äñ + ‚Äñf x - F n x‚Äñ * ‚ÄñG n x‚Äñ :=
      le_trans (norm_add_le _ _) (add_le_add (norm_mul_le _ _) (norm_mul_le _ _))
    _ < (f_bound + 1) * Œµg + Œµf * (‚ÄñG n x - g x‚Äñ + ‚Äñg x‚Äñ) := by
      apply add_lt_add_of_lt_of_le
      exact mul_lt_mul_of_nonneg (by linarith [hf_bound x hx]) (hg x hx)
        (norm_nonneg _) (norm_nonneg _) 
      refine mul_le_mul_of_nonneg (le_of_lt <| hf x hx) ?_ (norm_nonneg _) (by positivity)
      convert norm_add_le (G n x - g x) (g x)
      exact Eq.symm <| sub_add_cancel (G n x) (g x)
    _ ‚â§ (f_bound + 1) * Œµg + Œµf * (Œµg + g_bound) := by
      apply add_le_add_left
      apply mul_le_mul_of_nonneg_left _ (by positivity)
      apply add_le_add _ (hg_bound x hx)
      rw [norm_sub_rev]
      exact le_of_lt <| hg x hx
    _ = Œµ := by
      unfold Œµf Œµg
      field_simp
      ring 
  unfold TendstoUniformlyOn
  replace s_nonempty : s = ‚àÖ := Set.not_nonempty_iff_eq_empty.mp s_nonempty
  aesop

theorem TendstoUniformlyOn.mul‚ÇÄ_of_continuousOn_of_compact {Œ± Œπ R : Type*} [TopologicalSpace Œ±]
    [NormedRing R] {F G : Œπ ‚Üí Œ± ‚Üí R} {f g : Œ± ‚Üí R} {l : Filter Œπ} {s : Set Œ±} 
    (hf: TendstoUniformlyOn F f l s) (hg: TendstoUniformlyOn G g l s)
    (hf_cont : ContinuousOn f s) (hg_cont : ContinuousOn g s) (h_compact : IsCompact s) :
    TendstoUniformlyOn (fun i x ‚Ü¶ (F i x) * (G i x)) (f * g) l s :=
  TendstoUniformlyOn.mul‚ÇÄ_of_bounded hf hg (h_compact.exists_bound_of_continuousOn hf_cont)
    (h_compact.exists_bound_of_continuousOn hg_cont)

theorem TendstoUniformly.of_const {Œ± Œπ R : Type*} [UniformSpace R] (f : Œ± ‚Üí R) (l : Filter Œπ) :
    TendstoUniformly (fun (_ : Œπ) ‚Ü¶ f) f l := by
  rw [tendstoUniformly_iff_tendsto, tendsto_prod_iff]
  exact fun _ h ‚Ü¶ ‚ü®‚ä§, ‚ü®univ_mem, ‚ü®‚ä§, ‚ü®fun _ ‚Ü¶ trivial, fun _ _ _ _ ‚Ü¶ mem_uniformity_of_eq h rfl‚ü©‚ü©‚ü©‚ü©

theorem TendstoUniformlyOn.of_const {Œ± Œπ R : Type*} [UniformSpace R] (f : Œ± ‚Üí R) (l : Filter Œπ)
    (s : Set Œ±) : TendstoUniformlyOn (fun (_ : Œπ) ‚Ü¶ f) f l s :=
  (TendstoUniformly.of_const f l).tendstoUniformlyOn

-- Based on a proof found on
-- [Wikipedia](https://en.wikipedia.org/wiki/Iterated_limit#Moore-Osgood_theorem_for_interchanging_limits)
theorem TendstoUniformlyOn.interchange_limits {Œπ R‚ÇÅ R‚ÇÇ : Type*} [Nonempty Œπ] [SemilatticeSup Œπ]
    [NormedRing R‚ÇÇ] [CompleteSpace R‚ÇÇ] {a : Œπ ‚Üí R‚ÇÅ ‚Üí R‚ÇÇ} {b : R‚ÇÅ ‚Üí R‚ÇÇ} {c : Œπ ‚Üí R‚ÇÇ}
    {l : Filter R‚ÇÅ} [l.NeBot] {s : Set R‚ÇÅ} (hb : TendstoUniformlyOn a b atTop s)
    (hc : ‚àÄ·∂† n in atTop, Tendsto (fun x ‚Ü¶ a n x) l (ùìù (c n))) (hs : s ‚àà l):
    ‚àÉ L : R‚ÇÇ, Tendsto b l (ùìù L) ‚àß Tendsto c atTop (ùìù L) := by
  rw [tendstoUniformlyOn_iff] at hb
  rw [eventually_atTop] at hc
  obtain ‚ü®N‚ÇÅ, hN‚ÇÅ‚ü© := hc  
  have hcauchy : CauchySeq c := by
    refine Metric.cauchySeq_iff'.mpr fun Œµ Œµpos ‚Ü¶ ?_
    obtain ‚ü®N‚ÇÇ, hN‚ÇÇ‚ü© := eventually_atTop.mp <| hb (Œµ/4) (by positivity)
    use max N‚ÇÅ N‚ÇÇ
    intro n hn
    apply sup_le_iff.mp at hn
    rw [dist_eq_norm]
    have hdiff_tendsto : Tendsto (fun x ‚Ü¶ ‚Äña n x - a (N‚ÇÅ ‚äî N‚ÇÇ) x‚Äñ) l (ùìù (‚Äñc n - c (N‚ÇÅ ‚äî N‚ÇÇ)‚Äñ)) :=
      Tendsto.norm <| Tendsto.sub (hN‚ÇÅ n hn.left) (hN‚ÇÅ _ le_sup_left)
    refine lt_of_le_of_lt (tendsto_le_of_eventuallyLE hdiff_tendsto tendsto_const_nhds ?_)
      (div_two_lt_of_pos Œµpos)
    filter_upwards [hs] with x hx
    apply le_of_lt
    calc
      ‚Äña n x - a (N‚ÇÅ ‚äî N‚ÇÇ) x‚Äñ = ‚Äñ(a n x - b x) - (a (N‚ÇÅ ‚äî N‚ÇÇ) x - b x)‚Äñ := by
        apply congrArg
        rw [sub_sub_sub_cancel_right]
      _ ‚â§ ‚Äña n x - b x‚Äñ + ‚Äña (N‚ÇÅ ‚äî N‚ÇÇ) x - b x‚Äñ := norm_sub_le _ _
      _ = dist (b x) (a n x) + dist (b x) (a (N‚ÇÅ ‚äî N‚ÇÇ) x) := by
        rw [norm_sub_rev, ‚Üêdist_eq_norm, norm_sub_rev, ‚Üêdist_eq_norm]
      _ < Œµ/4 + Œµ/4 := by
        apply add_lt_add
        exact hN‚ÇÇ n hn.right x hx
        exact hN‚ÇÇ (N‚ÇÅ ‚äî N‚ÇÇ) le_sup_right x hx
      _ = Œµ/2 := by ring
  obtain ‚ü®L, hL‚ü© := cauchySeq_tendsto_of_complete hcauchy
  refine ‚ü®L, ‚ü®?_, hL‚ü©‚ü©
  refine Metric.tendsto_nhds.mpr fun Œµ Œµpos ‚Ü¶ ?_
  obtain ‚ü®N‚ÇÉ, hN‚ÇÉ‚ü© :=  eventually_atTop.mp <| Metric.tendsto_nhds.mp hL (Œµ/3) (by positivity)
  obtain ‚ü®N‚ÇÇ, hN‚ÇÇ‚ü© := eventually_atTop.mp <| hb (Œµ/3) (by positivity)
  let n := max (max N‚ÇÅ N‚ÇÇ) N‚ÇÉ
  replace hN‚ÇÅ := hN‚ÇÅ n (le_sup_of_le_left le_sup_left)
  replace hN‚ÇÇ := hN‚ÇÇ n (le_sup_of_le_left le_sup_right)
  replace hN‚ÇÉ := hN‚ÇÉ n le_sup_right
  rw [Metric.tendsto_nhds] at hN‚ÇÅ
  filter_upwards [hN‚ÇÅ (Œµ/3) (by positivity), hs] with x hx_dist hx_elem
  calc
    dist (b x) L = ‚Äñ(b x - a n x) + (a n x - c n) + (c n - L)‚Äñ := by
      rw [dist_eq_norm, sub_add_sub_cancel, sub_add_sub_cancel]
    _ ‚â§ ‚Äñb x - a n x‚Äñ + ‚Äña n x - c n‚Äñ + ‚Äñc n - L‚Äñ := by
      refine le_trans (norm_add_le _ _) ?_
      apply add_le_add_right <| norm_add_le _ _
    _ < Œµ/3 + Œµ/3 + Œµ/3 := by
      apply add_lt_add
      apply add_lt_add
      rw [‚Üêdist_eq_norm]
      exact hN‚ÇÇ x hx_elem
      rwa [dist_eq_norm] at hx_dist
      rwa [dist_eq_norm] at hN‚ÇÉ
    _ = Œµ := add_thirds Œµ

theorem interchange_limit_prod_of_tendstoUniformlyOn {Œπ Œ± R : Type*} [Nonempty Œπ] [SemilatticeSup Œπ]
    [DecidableEq Œπ] [NormedCommRing R] [CompleteSpace R] {f : Œπ ‚Üí Œ± ‚Üí R} {g : Œπ ‚Üí R} {l : Filter Œ±} 
    [l.NeBot] {s : Set Œ±}
    (h : TendstoUniformlyOn (fun (is : Finset Œπ) ‚Ü¶ fun (a : Œ±) ‚Ü¶  ‚àè i ‚àà is, f i a)
    (fun a ‚Ü¶ ‚àè' i, f i a) atTop s) (hlim : ‚àÄ i : Œπ, Tendsto (f i ¬∑) l (ùìù (g i))) (hs : s ‚àà l) :
    Tendsto (fun a ‚Ü¶ ‚àè' i, f i a) l (ùìù (‚àè' i, g i)) := by
  have hfin_prods_converge (is : Finset Œπ) :
      Tendsto (fun a ‚Ü¶ ‚àè i ‚àà is, f i a) l (ùìù (‚àè i ‚àà is, g i)) :=
    tendsto_finset_prod is (fun i _ ‚Ü¶ hlim i)
  obtain ‚ü®L, ‚ü®hL‚ÇÅ, hL‚ÇÇ‚ü©‚ü© := TendstoUniformlyOn.interchange_limits h
    (Eventually.of_forall hfin_prods_converge) hs
  rwa [‚ÜêHasProd.tprod_eq hL‚ÇÇ] at hL‚ÇÅ

lemma aux_norm_prod {Œ± : Type*} [NormedRing Œ±] [Nontrivial Œ±] [NormMulClass Œ±] {x : ‚Ñù} (hx‚ÇÄ : 0 ‚â§ x)
    (hx‚ÇÅ : x ‚â§ 1) (y : Œ±) : 1 - (‚Äñy - 1‚Äñ + x) ‚â§ ‚Äñy‚Äñ * (1 - x) := by
  calc
    ‚Äñy‚Äñ * (1 - x) ‚â• (1 - ‚Äñy - 1‚Äñ) * (1 - x) := by
      refine mul_le_mul_of_nonneg_right ?_ (sub_nonneg_of_le hx‚ÇÅ)
      rw [norm_sub_rev, ‚ÜêIsAbsoluteValue.abv_one' (norm : Œ± ‚Üí ‚Ñù)]
      convert norm_sub_norm_le _ _
      rw [sub_sub_cancel]
    _ = 1 - (‚Äñy - 1‚Äñ + x) + ‚Äñy - 1‚Äñ * x := by ring
    _ ‚â• 1 - (‚Äñy - 1‚Äñ + x) :=
      le_add_of_le_of_nonneg (le_of_eq <| Eq.refl _) (mul_nonneg (norm_nonneg _) hx‚ÇÄ)

lemma List.one_sub_sum_norm_le_prod_norm {Œ± : Type*} [NormedRing Œ±] [Nontrivial Œ±]
    [NormMulClass Œ±] {l : List Œ±} (h : (l.map (‚Äñ¬∑ - 1‚Äñ)).sum ‚â§ 1) :
    1 - (l.map (‚Äñ¬∑ - 1‚Äñ)).sum ‚â§ ‚Äñl.prod‚Äñ := by
  induction' l with head tail htail
  simp [IsAbsoluteValue.abv_one' (norm : Œ± ‚Üí ‚Ñù)]
  rw [prod_cons, norm_mul, map_cons, sum_cons]
  have hsum_norm_tail_nonneg : 0 ‚â§ (tail.map (‚Äñ¬∑ - 1‚Äñ)).sum := by
    apply List.sum_nonneg
    intro x hx
    obtain ‚ü®_, ‚ü®_, hx_eq_norm‚ü©‚ü© := List.mem_map.mp hx
    rw [‚Üêhx_eq_norm]
    exact norm_nonneg _
  have hsum_norm_tail_le_one : (tail.map (‚Äñ¬∑ - 1‚Äñ)).sum ‚â§ 1 := by
    apply le_trans _ h
    rw [map_cons, sum_cons]
    exact (le_add_iff_nonneg_left _).mpr (norm_nonneg _)
  refine le_trans (aux_norm_prod hsum_norm_tail_nonneg hsum_norm_tail_le_one head) ?_
  exact mul_le_mul_of_nonneg_left (htail hsum_norm_tail_le_one) (norm_nonneg _)

lemma Finset.one_sub_sum_norm_le_prod_norm {Œ± Œπ: Type*} [NormedCommRing Œ±] [Nontrivial Œ±]
    [NormMulClass Œ±] {s : Finset Œπ} {f : Œπ ‚Üí Œ±} (h : ‚àë i ‚àà s, ‚Äñf i - 1‚Äñ ‚â§ 1) :
    1 - ‚àë i ‚àà s, ‚Äñf i - 1‚Äñ ‚â§ ‚Äñ‚àè i ‚àà s, f i‚Äñ := by
    rw [‚ÜêFinset.prod_map_toList, ‚ÜêFinset.sum_map_toList]
    rw [show (fun i : Œπ ‚Ü¶ ‚Äñf i - 1‚Äñ) = (fun a : Œ± ‚Ü¶ ‚Äña - 1‚Äñ) ‚àò (fun i : Œπ ‚Ü¶ f i) by rfl]
    rw [‚ÜêList.map_map]
    apply List.one_sub_sum_norm_le_prod_norm
    simp [h]

-- Based on proof from
-- [course notes for Analytic Number Theory](https://pub.math.leidenuniv.nl/~evertsejh/ant20-0.pdf)
theorem product_nonzero_of_terms_nonzero_of_summable_norm {Œ± Œπ R : Type*} [NormedCommRing R]
    [Nontrivial R] [NormMulClass R] [NormOneClass R] [DecidableEq Œπ] {f : Œπ ‚Üí R}
    (hmultipliable : Multipliable f) (hsummable : Summable (fun i : Œπ ‚Ü¶ ‚Äñf i - 1‚Äñ))
    (hnon_zero : ‚àÄ i, f i ‚â† 0) : ‚àè' i : Œπ, f i ‚â† 0 := by
  have htail_tendsto_zero := tendsto_tsum_compl_atTop_zero (fun i : Œπ ‚Ü¶ ‚Äñf i - 1‚Äñ)
  apply (atTop_basis.tendsto_iff (nhds_basis_Ioo_pos 0)).mp at htail_tendsto_zero
  obtain ‚ü®M, ‚ü®_, hM‚ü©‚ü© := htail_tendsto_zero ((1 : ‚Ñù) / 2) one_half_pos 
  replace hM := hM M (Set.mem_Ici.mpr (le_refl M))
  rw [Set.mem_Ioo] at hM
  replace hM := hM.right
  norm_num at hM
  have hpartial_sum_upper_bound (s : Finset Œπ) : ‚àë i ‚àà (s \ M), ‚Äñf i - 1‚Äñ ‚â§ (1 : ‚Ñù) / 2 := by
    rw [‚ÜêFinset.tsum_subtype]
    let emb (x : { x // x ‚àà s \ M }) : { x // x ‚àâ M } := {
      val := x.val
      property := (Finset.mem_sdiff.mp x.property).right
    }
    have emb_injective : Function.Injective emb := fun _ _ heq ‚Ü¶ by
      apply_fun Subtype.val at heq
      exact Subtype.mk_eq_mk.mpr heq
    refine le_trans ?_ (le_of_lt hM)
    apply Summable.tsum_le_tsum_of_inj emb emb_injective
    exact fun _ _ ‚Ü¶ norm_nonneg _
    exact fun _ ‚Ü¶ by rfl
    apply Summable.subtype hsummable  
    apply Summable.subtype hsummable  
  have hpartial_products_lower_bound (s : Finset Œπ) :
      1 - ‚àë i ‚àà (s \ M), ‚Äñf i - 1‚Äñ ‚â§ ‚Äñ‚àè i ‚àà (s \ M), f i‚Äñ := by
    apply Finset.one_sub_sum_norm_le_prod_norm
    refine le_trans (hpartial_sum_upper_bound s) (by norm_num)
  replace hpartial_products_lower_bound (s : Finset Œπ) :
      (1 : ‚Ñù) / 2 ‚â§ ‚Äñ‚àè i ‚àà (s \ M), f i‚Äñ := by
    refine le_trans ?_ (hpartial_products_lower_bound s)
    linarith [hpartial_sum_upper_bound s]
  suffices ‚Äñ‚àè i ‚àà M, f i‚Äñ * ((1 : ‚Ñù) / 2) ‚â§ ‚Äñ‚àè' i : Œπ, f i‚Äñ by
    have : ‚Äñ‚àè i ‚àà M, f i‚Äñ > 0 := by
      rw [norm_prod]
      exact Finset.prod_pos fun i _ ‚Ü¶ norm_pos_iff.mpr (hnon_zero i)
    apply norm_pos_iff.mp
    linarith
  refine ge_of_tendsto (Tendsto.norm (Multipliable.hasProd hmultipliable)) ?_
  filter_upwards [eventually_ge_atTop M] with s hsubset
  have hdisjoint : Disjoint M (s \ M) := Finset.disjoint_sdiff
  rw [‚ÜêFinset.union_sdiff_of_subset hsubset, Finset.prod_union hdisjoint, norm_mul]
  exact mul_le_mul_of_nonneg_left (hpartial_products_lower_bound s) (norm_nonneg _)

