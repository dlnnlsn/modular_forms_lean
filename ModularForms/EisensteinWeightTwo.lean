import Mathlib.Analysis.Complex.UpperHalfPlane.Basic
import Mathlib.Analysis.SpecificLimits.RCLike
import Mathlib.Analysis.SpecialFunctions.Trigonometric.Basic
import Mathlib.Topology.Algebra.InfiniteSum.Defs
import Mathlib.Order.Filter.AtTopBot.Defs
import Mathlib.Topology.Defs.Filter
import ModularForms.Analysis
import ModularForms.ProdOnZ
import ModularForms.SpecialFunctions

open Real Complex UpperHalfPlane Filter Function Topology

lemma tendsto_const_div_linear_atTop_nhds_zero (a b c: ‚ÑÇ) (hb: b ‚â† 0):
    Tendsto (Œª n: ‚Ñï ‚Ü¶ a/(b*n + c)) atTop (ùìù 0) := by
  convert Tendsto.congr' ((eventually_ne_atTop 0).mp (Eventually.of_forall <| Œª n hn ‚Ü¶ _)) _
  exact Œª n: ‚Ñï ‚Ü¶ (n: ‚ÑÇ)‚Åª¬π * (a/(b + c * (n: ‚ÑÇ)‚Åª¬π))
  field_simp [Nat.cast_ne_zero.mpr hn]
  have h_lim_one_div_n: Tendsto (Œª n: ‚Ñï ‚Ü¶ (n: ‚ÑÇ)‚Åª¬π) atTop (ùìù 0) := by
    apply RCLike.tendsto_inverse_atTop_nhds_zero_nat
  have h_lim_c_div_n: Tendsto (Œª n: ‚Ñï ‚Ü¶ c * (n: ‚ÑÇ)‚Åª¬π) atTop (ùìù 0) := by
    simpa  using Tendsto.mul tendsto_const_nhds h_lim_one_div_n
  have h_lim_denom: Tendsto (Œª n: ‚Ñï ‚Ü¶ (b + c * (n: ‚ÑÇ)‚Åª¬π)) atTop (ùìù b) := by
    simpa using Tendsto.add tendsto_const_nhds h_lim_c_div_n
  have h_lim_frac: Tendsto (Œª n: ‚Ñï ‚Ü¶ a/(b + c * (n: ‚ÑÇ)‚Åª¬π)) atTop (ùìù (a/b)) := by
    simpa using Tendsto.div tendsto_const_nhds h_lim_denom hb
  simpa using Tendsto.mul h_lim_one_div_n h_lim_frac

noncomputable
def double_sum_lemma_summand_part (m n: ‚Ñ§) (z: ‚Ñç): ‚ÑÇ := 1/(m*z + n)

noncomputable
def double_sum_lemma_summand (m n: ‚Ñ§) (z: ‚Ñç): ‚ÑÇ := double_sum_lemma_summand_part m n z - double_sum_lemma_summand_part m (n + 1) z

lemma eisenstein_double_sum_telescopes (m: ‚Ñ§) (z: ‚Ñç):
    HasSumOnZ ‚ä§ (double_sum_lemma_summand m ¬∑ z) 0 := by
  let f: ‚Ñ§ ‚Üí ‚ÑÇ := Œª n ‚Ü¶ 1/(m*(z: ‚ÑÇ) + n)
  have h_neg: Tendsto (Œª n: ‚Ñï ‚Ü¶ f (-n: ‚Ñ§)) atTop (ùìù 0) := by simpa [f, add_comm] using tendsto_const_div_linear_atTop_nhds_zero 1 (-1) (m*z)
  have h_pos: Tendsto (Œª n: ‚Ñï ‚Ü¶ f n) atTop (ùìù 0) := by simpa [f, add_comm] using tendsto_const_div_linear_atTop_nhds_zero 1 1 (m*z)
  simpa using HasSumOnZ.sum_sub_range h_neg h_pos

lemma eisenstein_double_sum_0 (z: ‚Ñç): HasSumOnZ (‚ä§ \ {0}) (Œª m ‚Ü¶ ‚àë_‚Ñ§ n, double_sum_lemma_summand m n z) 0 := by
  simp_rw [Œª m ‚Ü¶ (eisenstein_double_sum_telescopes m z).z_sum_eq]
  apply HasSumOnZ.sum_const_zero

lemma eisenstein_double_sum_summable (z: ‚Ñç) (n: ‚Ñ§): SummableOnZ (‚ä§ \ {0}) (double_sum_lemma_summand ¬∑ n z) := by sorry

open Classical in
lemma eisenstein_double_sum_2piiz (z: ‚Ñç): HasSumOnZ ‚ä§ (‚àë_‚Ñ§' m, double_sum_lemma_summand m ¬∑ z) ((-2 * œÄ * Complex.I) / (z: ‚ÑÇ)) := by
  unfold HasSumOnZ sum_within_radius
  simp_rw [exchange_z_sum_finsum <| (Œª m _ ‚Ü¶ eisenstein_double_sum_summable z m)]
  simp_rw [show ‚àÄ N: ‚Ñï, ‚àÄ m: ‚Ñ§,  ‚àë n ‚àà Finset.filter (¬∑ ‚àà (‚ä§: Set ‚Ñ§)) (Finset.Ico (-N: ‚Ñ§) N), double_sum_lemma_summand m n z
    = sum_within_radius N (‚ä§: Set ‚Ñ§) (double_sum_lemma_summand   m ¬∑ z) from Œª _ _ ‚Ü¶ rfl]
  unfold double_sum_lemma_summand
  simp_rw [sum_within_radius_of_top_range_sub]
  unfold double_sum_lemma_summand_part
  simp_rw [z_sum'_eq_tsum_of_summable_of_pos_of_neg (by sorry)]
  have h_summand (m n: ‚Ñï): 1/((m + 1: ‚ÑÇ)*(z: ‚ÑÇ) + (-n)) - 1/((m + 1)*z + n) + (1/(-(m + 1)*z + (-n)) - 1/(-(m + 1)*z + n))
    = 2/(z: ‚ÑÇ) * (1/(-n/z + (m + 1)) + 1/(-n/z - (m + 1))):= by sorry
  push_cast at h_summand ‚ä¢
  simp_rw [h_summand]
  simp_rw [Summable.tsum_mul_left (2/(z: ‚ÑÇ)) (by sorry)]
  rw [show -2 * œÄ * Complex.I / z = 2/(z: ‚ÑÇ) * (œÄ * (-Complex.I - (2 * œÄ * Complex.I) * ‚àë' _: ‚Ñï, 0) - 0) by
    rw [tsum_zero]
    ring
  ]
  apply Tendsto.const_mul
  simp_rw [Œª n: ‚Ñï ‚Ü¶ eq_sub_of_add_eq' <| Eq.symm <| cotangent_expansion ((-n: ‚ÑÇ)/z) (by sorry)]
  simp_rw [Œª n: ‚Ñï ‚Ü¶ cotangent_dirichlet_expansion' ((œÄ: ‚ÑÇ) * ((-n: ‚ÑÇ)/(z: ‚ÑÇ))) (by sorry)]
  apply Tendsto.sub
  apply Tendsto.const_mul
  apply Tendsto.const_sub
  apply Tendsto.const_mul
  have bound_summable: Summable (Œª d: ‚Ñï ‚Ü¶ ‚ÄñComplex.exp (-2 * œÄ * Complex.I/z)‚Äñ^d) := by sorry
  apply interchange_limit_sum_of_dominated_convergence _ _ bound_summable
  sorry
  sorry
  simp_rw [show ‚àÄ n: ‚Ñï, 1/((-n: ‚ÑÇ)/(z: ‚ÑÇ)) = -(z: ‚ÑÇ)/(1 * n + 0)  by
    intro n
    field_simp
    ring
  ]
  apply tendsto_const_div_linear_atTop_nhds_zero (-z: ‚ÑÇ) 1 0 (Ne.symm <| zero_ne_one' ‚ÑÇ)
